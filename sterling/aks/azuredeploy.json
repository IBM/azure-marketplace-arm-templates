{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "namePrefix": {
            "type": "string",
            "minLength": 3,
            "maxLength": 15,
            "metadata": {
                "description": "Prefix for resource names"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Azure location for resources"
            }
        },
        "vnetName": {
            "type": "string",
            "defaultValue": "vnet",
            "metadata": {
                "description": "Virtual network name"
            }
        },
        "virtualNetworkNewOrExisting":{
            "type": "string",
            "defaultValue": "new",
            "allowedValues": [
                "new",
                "existing"
            ],
            "metadata": {
                "description": "Flag to indicate whether a new virtual network should be created (true), or use an existing one (false)."
            }
        },
        "vnetCIDR": {
            "type": "string",
            "defaultValue": "10.0.0.0/20",
            "metadata": {
                "description": "CIDR for Virtual Network if being created otherwise ignored"
            }
        },
        "aksSubnetName": {
            "type": "string",
            "defaultValue": "control-subnet",
            "metadata": {
                "description": "Subnet name for the AKS worker plan nodes"
            }
        },
        "aksSubnetCIDR": {
            "type": "string",
            "defaultValue": "10.0.0.0/24",
            "metadata": {
                "description": "IP address CIDR for the AKS control plane nodes"
            }
        },
        "podSubnetName": {
            "type": "string",
            "defaultValue": "worker-subnet",
            "metadata": {
                "description": "Subnet name for the AKS worker plan nodes"
            }
        },
        "podSubnetCIDR": {
            "type": "string",
            "defaultValue": "10.0.1.0/24",
            "metadata": {
                "description": "IP address CIDR for the AKS worker plane nodes"
            }
        },
        "ngwName": {
            "type": "string",
            "defaultValue": "[concat(parameters('namePrefix'), '-ngw')]",
            "metadata": {
                "description": "Name of the NAT Gateway"
            }
        },
        "networkResourceGroup": {
            "type": "string",
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
                "description": "Name of the resource group containing the virtual network if existing VNet"
            }
        },
        "outboundRouting": {
            "type": "string",
            "defaultValue": "NAT Gateway",
            "allowedValues": [
                "Azure Default",
                "NAT Gateway",
                "User Defined"
            ],
            "metadata": {
                "description": "Routing method for outbound traffic"
            }
        },
        "createNatGateway": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Flag to determine whether to create a new or use an existing NAT Gateway (specify the existing NAT gateway if using)"
            }
        },
        "publicIPPrefixName": {
            "type": "string",
            "defaultValue": "ngw-pip",
            "metadata": {
                "description": "Name of the public IP prefix if using NAT Gateway routing"
            }
        },
        "publicIPPrefixLength": {
            "type": "int",
            "defaultValue": 28,
            "allowedValues": [
                28,
                29,
                30,
                31
            ],
            "metadata": {
                "description": "Specifies the length of the public IP prefix."
            }
        },
        "workspaceName": {
            "type": "string",
            "defaultValue": "[concat(parameters('namePrefix'),'workspace')]",
            "metadata": {
                "description": "Name for the analytics workspace"
            }
        },
        "logAnalyticsSku": {
            "type": "string",
            "defaultValue": "PerGB2018",
            "allowedValues": [
                "Free",
                "Standalone",
                "PerNode",
                "PerGB2018"
            ],
            "metadata": {
                "description": "SKU for the log analytics service if setting up a new workspace."
            }
        },
        "createAnalyticsWorkspace": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Flag to determine whether to create a new workspace"
            }
        },
        "deployLogAnalytics": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Flag to determine whether to deploy Log Analytics"
            }
        },
        "managedIdName": {
            "type": "string",
            "defaultValue": "[concat(parameters('namePrefix'),'-id')]",
            "metadata": {
                "description": "Name of the managed identity for the resource group that will be assigned to the VM"
            }
        },
        "aksClusterName": {
            "type": "string",
            "defaultValue": "[concat(parameters('namePrefix'),'-aks')]",
            "metadata": {
                "description": "Name for the AKS cluster"
            }
        },
        "aksSkuTier": {
            "type": "string",
            "defaultValue": "Premium",
            "allowedValues": [
                "Free",
                "Standard",
                "Premium"
            ],
            "metadata": {
                "description": "SKU tier for the AKS cluster. "
            }
        },
        "aksClusterPrivate": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Flag to determine whether the AKS cluster will private only - i.e. will not have any public ingress"
            }
        },
        "aksClusterDisableLocalAccounts": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Flag to determine whether local kubernetes accounts should be disabled. Setting this requires all users to be defined in EntraID"
            }
        },
        "aksClusterNodeOsUpgradeChannel": {
            "type": "string",
            "defaultValue": "NodeImage",
            "allowedValues": [
                "NodeImage",
                "None",
                "Unmanaged"
            ]
        },
        "aksClusterUpgradeChannel": {
            "type": "string",
            "defaultValue": "patch",
            "allowedValues": [
                "none-image",
                "none",
                "patch",
                "rapid",
                "stable"
            ]
        },
        "aksEnablePodIdentityProfile": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Flag to determine whether the AKS pod identity profile should be enabled. Requires feature to be enabled in subscription"
            }
        },
        "aksEnableAadIntegration": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Flag to determine whether to enable AKS EntraID integration"
            }
        },
        "aksEnableAadRbac": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Flag to determine whether to enable EntraID RBAC authentication for kubernetes users"
            }
        },
        "aksAdminGroupObjectId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "EntraID group object Id that will have admin access to the AKS cluster. Only valid and required if AAD RBAC is enabled."
            }
        },
        "aksAadTenantId": {
            "type": "string",
            "defaultValue": "[tenant().tenantId]",
            "metadata": {
                "description": "Tenant Id for the EntraID group object that will have admin access to the AKS cluster. Only valid if AAD RBAC is enabled."
            }
        },
        "aksKubernetesVersion": {
            "type": "string",
            "defaultValue": "1.27",
            "metadata": {
                "description": "Version of kubneretes to be used for the AKS cluster"
            }
        },
        "aksClusterDnsPrefix": {
            "type": "string",
            "defaultValue": "[concat(parameters('aksClusterName'),substring( uniqueString(resourceGroup().id), 1, 4 ))]",
            "metadata": {
                "description": "Domain name prefix for the AKS cluster"
            }
        },
        "aksEnableRbac": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Flag to determine whether to use RBAC for the AKS cluster"
            }
        },
        "aksEnableAzurePolicy": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Flag to determine whether to enable Azure policy in the AKS cluster"
            }
        },
        "aksAdminUserName": {
            "type": "string",
            "defaultValue": "aksadmin",
            "metadata": {
                "description": "Default administrator user for AKS nodes"
            }
        },
        "aksSshPublicKey": {
            "type": "string",
            "metadata": {
                "description": "SSH public key for AKS node administrator access"
            }
        },
        "aksAutoScalerScanInterval": {
            "type": "string",
            "defaultValue": "10s",
            "metadata": {
                "description": "Scan interval for the auto-scaler of the AKS cluster."
            }
        },
        "aksAutoScalerDownDelayPostAdd": {
            "type": "string",
            "defaultValue": "10m",
            "metadata": {
                "description": "Auto scaler scale down delay after add for the AKS cluster."
            }
        },
        "aksAutoScalerDownDelayPostDelete": {
            "type": "string",
            "defaultValue": "20s",
            "metadata": {
                "description": "Auto scaler scale down delay after delete for the AKS cluster."
            }
        },
        "aksAutoScalerDownDelayPostFailure": {
            "type": "string",
            "defaultValue": "3m",
            "metadata": {
                "description": "Auto scaler scale down delay after failure for the AKS cluster."
            }
        },
        "aksAutoScalerScaleDownUnneededTime": {
            "type": "string",
            "defaultValue": "10m",
            "metadata": {
                "description": "Auto-scaler scale down unneeded time for the AKS cluster."
            }
        },
        "aksAutoScalerScaleDownUnReadyTime": {
            "type": "string",
            "defaultValue": "20m",
            "metadata": {
                "description": "Auto-scaler scale down unready time for the AKS cluster."
            }
        },
        "aksAutoScalerScaleDownUtilThreshold": {
            "type": "string",
            "defaultValue": "0.5",
            "metadata": {
                "description": "Auto-scaler utilization threshold for the AKS cluster."
            }
        },
        "aksAutoScalerMaxGraceTerminationTime": {
            "type": "string",
            "defaultValue": "600",
            "metadata": {
                "description": "Auto-scaler maximum graceful termination time interval in seconds for the AKS cluster."
            }
        },
        "aksSystemNodePoolName": {
            "type": "string",
            "defaultValue": "control",
            "metadata": {
                "description": "The name of the AKS control node pool"
            }
        },
        "aksSystemNodeVmPoolType": {
            "type": "string",
            "defaultValue": "VirtualMachineScaleSets",
            "allowedValues": [
                "VirtualMachineScaleSets",
                "AvailabilitySet"
            ],
            "metadata": {
                "description": "The type of VM pool for the system nodes - virtual machine set or availability set"
            }
        },
        "aksSystemNodeCount": {
            "type": "int",
            "defaultValue": 3,
            "metadata": {
                "description": "Number of AKS control nodes to deploy by default"
            }
        },
        "aksSystemNodeSize": {
            "type": "string",
            "defaultValue": "Standard_D8s_v3",
            "metadata": {
                "description": "VM size of each AKS control plane node"
            }
        },
        "aksSystemNodeType": {
            "type": "string",
            "defaultValue": "Linux",
            "allowedValues": [
                "Linux",
                "Windows"
            ]
        },
        "aksSystemNodeOsSku": {
            "type": "string",
            "defaultValue": "Ubuntu",
            "allowedValues": [
                "AzureLinux",
                "CBLMariner",
                "Ubuntu",
                "Windows2019",
                "Windows2022"
            ]
        },
        "aksSystemOsDiskSize": {
            "type": "int",
            "defaultValue": 128,
            "metadata": {
                "description": "Size in GiB of the OS disk for the AKS control plan nodes"
            }
        },
        "aksSystemNodeMax": {
            "type": "int",
            "defaultValue": 6,
            "metadata": {
                "description": "Maximum number of AKS control plane nodes to scale up to"
            }
        },
        "aksSystemNodeMin": {
            "type": "int",
            "defaultValue": 3,
            "metadata": {
                "description": "Minimum number of AKS control plane nodes to scale up to"
            }
        },
        "aksSystemNodeAutoScaling": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Flag to determine whether to use auto scaling with the AKS control plane nodes"
            }
        },
        "aksSystemNodeScaleSetPriority": {
            "type": "string",
            "defaultValue": "Regular",
            "allowedValues": [
                "Spot",
                "Regular"
            ],
            "metadata": {
                "description": "Auto-scaler priority for the AKS control plan nodes"
            }
        },
        "aksSystemNodeScaleSetEvictionPolicy": {
            "type": "string",
            "defaultValue": "Delete",
            "allowedValues": [
                "Delete",
                "Deallocate"
            ],
            "metadata": {
                "description": "Auto-scaler eviction policy for the AKS control plan nodes"
            }
        },
        "aksSystemNodeAvailabilityZone": {
            "type": "array",
            "defaultValue": [
                "1",
                "2",
                "3"
            ],
            "metadata": {
                "description": "Array of the availability zones to be used for the AKS control plane nodes (only relevant when pool type is virtual machine scale set.)"
            }
        },
        "aksSystemNodeMaxPods": {
            "type": "int",
            "defaultValue": 30,
            "metadata": {
                "description": "Maximum number of pods that can run on an AKS control plane node"
            }
        },
        "aksSystemNodeLabels": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "Additional labels for the AKS control plane nodes"
            }
        },
        "aksSystemNodeTaints": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of additional taints for the AKS control plane nodes"
            }
        },
        "aksUserNodePoolName": {
            "type": "string",
            "defaultValue": "worker",
            "metadata": {
                "description": "The name of the AKS control node pool"
            }
        },
        "aksUserNodeVmPoolType": {
            "type": "string",
            "defaultValue": "VirtualMachineScaleSets",
            "allowedValues": [
                "VirtualMachineScaleSets",
                "AvailabilitySet"
            ],
            "metadata": {
                "description": "The type of VM pool for the system nodes - virtual machine set or availability set"
            }
        },
        "aksUserNodeCount": {
            "type": "int",
            "defaultValue": 3,
            "metadata": {
                "description": "Number of AKS control nodes to deploy by default"
            }
        },
        "aksUserNodeSize": {
            "type": "string",
            "defaultValue": "Standard_D8s_v3",
            "metadata": {
                "description": "VM size of each AKS control plane node"
            }
        },
        "aksUserNodeType": {
            "type": "string",
            "defaultValue": "Linux",
            "allowedValues": [
                "Linux",
                "Windows"
            ]
        },
        "aksUserNodeOsSku": {
            "type": "string",
            "defaultValue": "Ubuntu",
            "allowedValues": [
                "AzureLinux",
                "CBLMariner",
                "Ubuntu",
                "Windows2019",
                "Windows2022"
            ]
        },
        "aksUserOsDiskSize": {
            "type": "int",
            "defaultValue": 128,
            "metadata": {
                "description": "Size in GiB of the OS disk for the AKS control plan nodes"
            }
        },
        "aksUserNodeMax": {
            "type": "int",
            "defaultValue": 10,
            "metadata": {
                "description": "Maximum number of AKS control plane nodes to scale up to"
            }
        },
        "aksUserNodeMin": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "Minimum number of AKS control plane nodes to scale up to"
            }
        },
        "aksUserNodeAutoScaling": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Flag to determine whether to use auto scaling with the AKS control plane nodes"
            }
        },
        "aksUserNodeScaleSetPriority": {
            "type": "string",
            "defaultValue": "Regular",
            "allowedValues": [
                "Spot",
                "Regular"
            ],
            "metadata": {
                "description": "Auto-scaler priority for the AKS control plan nodes"
            }
        },
        "aksUserNodeScaleSetEvictionPolicy": {
            "type": "string",
            "defaultValue": "Delete",
            "allowedValues": [
                "Delete",
                "Deallocate"
            ],
            "metadata": {
                "description": "Auto-scaler eviction policy for the AKS control plan nodes"
            }
        },
        "aksUserNodeAvailabilityZone": {
            "type": "array",
            "defaultValue": [
                "1",
                "2",
                "3"
            ],
            "metadata": {
                "description": "Array of the availability zones to be used for the AKS control plane nodes (only relevant when pool type is virtual machine scale set.)"
            }
        },
        "aksUserNodeMaxPods": {
            "type": "int",
            "defaultValue": 30,
            "metadata": {
                "description": "Maximum number of pods that can run on an AKS control plane node"
            }
        },
        "aksUserNodeLabels": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "Additional labels for the AKS control plane nodes"
            }
        },
        "aksUserNodeTaints": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of additional taints for the AKS control plane nodes"
            }
        },
        "aksEnableEncryptionAtHost": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Flag to determine whether to enable encryption at host on AKS cluster nodes. Not supported on all VM sizes or Azure regions. Refer https://docs.microsoft.com/azure/aks/enable-host-encryption"
            }
        },
        "aksEnableFips": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Flag to determine whether to enable FIPS on AKS cluster nodes. Refer to https://learn.microsoft.com/en-us/azure/aks/use-multiple-node-pools#add-a-fips-enabled-node-pool-preview"
            }
        },
        "aksEnableUltraSsd": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Flag to determine whether to enable Ultra SSD support for the AKS cluster nodes"
            }
        },
        "aksEnableNodePublicIp": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Flag to determine whether to enable public IP on each AKS cluster node"
            }
        },
        "aksServiceCidr": {
            "type": "string",
            "defaultValue": "172.16.0.0/16",
            "metadata": {
                "description": "IP address prefix for the internal AKS services"
            }
        },
        "aksDnsServiceIp": {
            "type": "string",
            "defaultValue": "172.16.0.10",
            "metadata": {
                "description": "IP address for the internal DNS service. Must be within the serviceCIDR"
            }
        },
        "aksDockerBridgeCidr": {
            "type": "string",
            "defaultValue": "172.17.0.1/16",
            "metadata": {
                "description": "IP address prefix for the docker bridge network. Must not overlap with any other internal or external IP addresses."
            }
        },
        "aksPodCidr": {
            "type": "string",
            "defaultValue": "192.168.0.0/16",
            "metadata": {
                "description": "IP address prefix for the pod network"
            }
        },
        "aksLoadBalancerSku": {
            "type": "string",
            "defaultValue": "standard",
            "allowedValues": [
                "basic",
                "standard"
            ],
            "metadata": {
                "description": "SKU for the Load Balancer front end for the AKS cluster nodes. Must be standard for private clusters."
            }
        },
        "aksNetworkPlugin": {
            "type": "string",
            "defaultValue": "azure",
            "allowedValues": [
                "azure",
                "kubenet"
            ],
            "metadata": {
                "description": "Specifies the type of AKS network plugin to be used - azure or kubenet"
            }
        },
        "aksNetworkPolicy": {
            "type": "string",
            "defaultValue": "azure",
            "allowedValues": [
                "azure",
                "calico"
            ],
            "metadata": {
                "description": "Specifies the network policy for building networks in the AKS cluster - Calico or Azure"
            }
        },
        "tagsByResource": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "Tags for resources"
            }
        }
    },
    "variables": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "roleDefinitionName": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdName')), variables('roleDefinitionId'), resourceGroup().id)]",
        "aksOmsAgentConfig": {
            "logAnalyticsWorkspaceResourceID": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
        },
        "aksOutboundType": {
            "NAT Gateway": "userAssignedNATGateway",
            "User Defined": "userDefinedRouting",
            "Azure Default": "loadBalancer"
        },
        "vnetId": {
            "new": "[resourceId('Microsoft.Network/virtualNetworks',parameters('vnetName'))]",
            "existing": "[resourceId(parameters('networkResourceGroup'),'Microsoft.Network/virtualNetworks',parameters('vnetName'))]"
        },
        "aksSubnetId": "[concat(variables('vnetId')[parameters('virtualNetworkNewOrExisting')],'/subnets/',parameters('aksSubnetName'))]",
        "podSubnetId": "[concat(variables('vnetId')[parameters('virtualNetworkNewOrExisting')],'/subnets/',parameters('podSubnetName'))]",
        "aadProfile": {
            "managed": "[parameters('aksEnableAadIntegration')]",
            "enableAzureRBAC": "[parameters('aksEnableAadRbac')]",
            "adminGroupObjectIDs": [ "[parameters('aksAdminGroupObjectId')]" ],
            "tenantID": "[parameters('aksAadTenantId')]"
        }
    },
    "resources": [
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "apiVersion": "2018-11-30",
            "name": "[parameters('managedIdName')]",
            "location": "[parameters('location')]",
            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), parameters('tagsByResource')['Microsoft.ManagedIdentity/userAssignedIdentities'], json('{}')) ]"
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[variables('roleDefinitionName')]",
            "dependsOn": [
                "[parameters('managedIdName')]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('roleDefinitionId')]",
                "principalId": "[reference(parameters('managedIdName'), '2018-11-30').principalId]",
                "scope": "[resourceGroup().id]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.Network/publicIPPrefixes",
            "apiVersion": "2022-05-01",
            "name": "[parameters('publicIPPrefixName')]",
            "comments": "Creates a public IP prefix for the NAT Gateway if NAT GW is being created",
            "condition": "[and(equals(parameters('outboundRouting'),'NAT Gateway'),parameters('createNatGateway'))]",
            "location": "[parameters('location')]",
            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/publicIPPrefixes'), parameters('tagsByResource')['Microsoft.Network/publicIPPrefixes'], json('{}')) ]",
            "sku": {
                "name": "Standard",
                "tier": "Regional"
            },
            "properties": {
                "prefixLength": "[parameters('publicIPPrefixLength')]",
                "publicIPAddressVersion": "IPv4"
            }
        },
        {
            "type": "Microsoft.Network/natGateways",
            "apiVersion": "2022-05-01",
            "name": "[parameters('ngwName')]",
            "location": "[parameters('location')]",
            "comments": "Create a NAT Gateway if requested and using NAT gateway for outbound routing",
            "condition": "[and(equals(parameters('outboundRouting'),'NAT Gateway'),parameters('createNatGateway'))]",
            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/natGateways'), parameters('tagsByResource')['Microsoft.Network/natGateways'], json('{}')) ]",
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "idleTimeoutInMinutes": 4,
                "publicIpPrefixes": [
                    {
                    "id": "[resourceId('Microsoft.Network/publicIPPrefixes', parameters('publicIPPrefixName'))]"
                    }
                ]
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPPrefixes', parameters('publicIPPrefixName'))]"
            ]
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2020-11-01",
            "condition": "[equals(parameters('virtualNetworkNewOrExisting'),'new')]",
            "comments": "Create a new virtual network if requested.",
            "name": "[parameters('vnetName')]",
            "location": "[parameters('location')]",
            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/virtualNetworks'), parameters('tagsByResource')['Microsoft.Network/virtualNetworks'], json('{}')) ]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('vnetCIDR')]"
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2022-09-01",
            "name": "configureSubnets",
            "dependsOn": [
                "[resourceId('Microsoft.Network/natGateways', parameters('ngwName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
            ],
            "resourceGroup": "[parameters('networkResourceGroup')]",
            "properties": {
                "mode": "Incremental",
                "expressionEvaluationOptions": {
                    "scope": "Inner"
                },
                "parameters": {
                    "vnetName": {
                        "value": "[parameters('vnetName')]"
                    },
                    "aksSubnetName": {
                        "value": "[parameters('aksSubnetName')]"
                    },
                    "aksSubnetCIDR": {
                        "value": "[parameters('aksSubnetCIDR')]"
                    },
                    "podSubnetName": {
                        "value": "[parameters('podSubnetName')]"
                    },
                    "podSubnetCIDR": {
                        "value": "[parameters('podSubnetCIDR')]"
                    },
                    "ngwName": {
                        "value": "[parameters('ngwName')]"
                    },
                    "configureNatGateway": {
                        "value": "[if(equals(parameters('outboundRouting'),'NAT Gateway'),'yes','no')]"
                    },
                    "ngwResourceGroup": {
                        "value": "[resourceGroup().name]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "vnetName": {
                            "type": "string"
                        },
                        "aksSubnetCIDR": {
                            "type": "string"
                        },
                        "aksSubnetName": {
                            "type": "string"
                        },
                        "podSubnetCIDR": {
                            "type": "string"
                        },
                        "podSubnetName": {
                            "type": "string"
                        },
                        "ngwName": {
                            "type": "string"
                        },
                        "configureNatGateway": {
                            "type": "string"
                        },
                        "ngwResourceGroup": {
                            "type": "string"
                        }
                    },
                    "variables": {
                        "ngwId": {
                            "yes": { 
                                "id": "[resourceId(parameters('ngwResourceGroup'),'Microsoft.Network/natGateways', parameters('ngwName'))]"
                            },
                            "no": "[json('null')]"
                        }
                    },
                    "resources": [
                        {
                            "type": "Microsoft.Network/virtualNetworks/subnets",
                            "apiVersion": "2020-11-01",
                            "name": "[concat(parameters('vnetName'),'/',parameters('aksSubnetName'))]",
                            "properties": {
                                "addressPrefix": "[parameters('aksSubnetCIDR')]",
                                "natGateway": "[variables('ngwId')[parameters('configureNatGateway')]]",
                                "privateEndpointNetworkPolicies": "Disabled",
                                "privateLinkServiceNetworkPolicies": "Enabled"
                            }
                        },
                        {
                            "type": "Microsoft.Network/virtualNetworks/subnets",
                            "apiVersion": "2020-11-01",
                            "name": "[concat(parameters('vnetName'),'/',parameters('podSubnetName'))]",
                            "properties": {
                                "addressPrefix": "[parameters('podSubnetCIDR')]",
                                "natGateway": "[variables('ngwId')[parameters('configureNatGateway')]]",
                                "privateEndpointNetworkPolicies": "Disabled",
                                "privateLinkServiceNetworkPolicies": "Enabled"
                            },
                            "dependsOn": [
                                "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('aksSubnetName'))]"
                            ]
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.ContainerService/managedClusters",
            "apiVersion": "2023-11-01",
            "name": "[parameters('aksClusterName')]",
            "location": "[parameters('location')]",
            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.ContainerService/managedClusters'), parameters('tagsByResource')['Microsoft.ContainerService/managedClusters'], json('{}')) ]",
            "sku": {
                "name": "Base",
                "tier": "[parameters('aksSkuTier')]"
            },
            "identity": {
                "type": "userAssigned",
                "userAssignedIdentities": {
                    "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',parameters('managedIdName'))]": {}
                }
            },
            "properties": {
                "supportPlan": "[if(equals(parameters('aksSkuTier'),'Premium'),'AKSLongTermSupport','KubernetesOfficial')]",
                "aadProfile": "[if(parameters('aksEnableAadIntegration'),variables('aadProfile'),json('null'))]",
                "kubernetesVersion": "[parameters('aksKubernetesVersion')]",
                "dnsPrefix": "[parameters('aksClusterDnsPrefix')]",
                "enableRBAC": "[parameters('aksEnableRbac')]",
                "disableLocalAccounts": "[if(parameters('aksEnableAadIntegration'),parameters('aksClusterDisableLocalAccounts'),bool('false'))]",
                "linuxProfile": {
                    "adminUsername": "[parameters('aksAdminUserName')]",
                    "ssh": {
                        "publicKeys": [
                            {
                                "keyData": "[parameters('aksSshPublicKey')]"
                            }
                        ]
                    }
                },
                "addonProfiles": {
                    "omsagent": {
                        "enabled": "[parameters('deployLogAnalytics')]",
                        "config": "[if(parameters('deployLogAnalytics'),variables('aksOmsAgentConfig'),json('null'))]"
                    },
                    "azurepolicy": {
                        "enabled": "[parameters('aksEnableAzurePolicy')]",
                        "config": {
                            "version": "v2"
                        }
                    }
                },
                "autoUpgradeProfile": {
                    "nodeOSUpgradeChannel": "[parameters('aksClusterNodeOsUpgradeChannel')]",
                    "upgradeChannel": "[parameters('aksClusterUpgradeChannel')]"
                },
                "podIdentityProfile": {
                    "enabled": "[parameters('aksEnablePodIdentityProfile')]"
                },
                "networkProfile": {
                    "dnsServiceIP": "[parameters('aksDnsServiceIp')]",
                    "dockerBridgeCidr": "[parameters('aksDockerBridgeCidr')]",
                    "podCidr": "[parameters('aksPodCidr')]",
                    "serviceCidr": "[parameters('aksServiceCidr')]",
                    "loadBalancerSku": "[if(parameters('aksClusterPrivate'),'Standard',parameters('aksLoadBalancerSku'))]",
                    "loadBalancerProfile": "[json('null')]",
                    "outboundType": "[variables('aksOutboundType')[parameters('outboundRouting')]]",
                    "networkPlugin": "[parameters('aksNetworkPlugin')]",
                    "networkPolicy": "[parameters('aksNetworkPolicy')]"
                },
                "apiServerAccessProfile": {
                    "enablePrivateCluster": "[parameters('aksClusterPrivate')]"
                },
                "autoScalerProfile": {
                    "scan-interval": "[parameters('aksAutoScalerScanInterval')]",
                    "scale-down-delay-after-add": "[parameters('aksAutoScalerDownDelayPostAdd')]",
                    "scale-down-delay-after-delete": "[parameters('aksAutoScalerDownDelayPostDelete')]",
                    "scale-down-delay-after-failure": "[parameters('aksAutoScalerDownDelayPostFailure')]",
                    "scale-down-unneeded-time": "[parameters('aksAutoScalerScaleDownUnneededTime')]",
                    "scale-down-unready-time": "[parameters('aksAutoScalerScaleDownUnReadyTime')]",
                    "scale-down-utilization-threshold": "[parameters('aksAutoScalerScaleDownUtilThreshold')]",
                    "max-graceful-termination-sec": "[parameters('aksAutoScalerMaxGraceTerminationTime')]"
                },
                "agentPoolProfiles": [
                    {
                        "name": "[parameters('aksSystemNodePoolName')]",
                        "mode": "System",
                        "type": "[parameters('aksSystemNodeVmPoolType')]",
                        "nodeLabels": "[parameters('aksSystemNodeLabels')]",
                        "nodeTaints": "[parameters('aksSystemNodeTaints')]",
                        "count": "[parameters('aksSystemNodeCount')]",
                        "vmSize": "[parameters('aksSystemNodeSize')]",
                        "osType": "[parameters('aksSystemNodeType')]",
                        "osSKU": "[parameters('aksSystemNodeOsSku')]",
                        "osDiskSizeGB": "[parameters('aksSystemOsDiskSize')]",
                        "vnetSubnetID": "[variables('aksSubnetId')]",
                        "podSubnetID": "[variables('podSubnetId')]",
                        "maxCount": "[parameters('aksSystemNodeMax')]",
                        "minCount": "[parameters('aksSystemNodeMin')]",
                        "enableAutoScaling": "[parameters('aksSystemNodeAutoScaling')]",
                        "scaleSetPriority": "[parameters('aksSystemNodeScaleSetPriority')]",
                        "scaleSetEvictionPolicy": "[parameters('aksSystemNodeScaleSetEvictionPolicy')]",
                        "availabilityZones": "[if(equals(parameters('aksSystemNodeVmPoolType'),'VirtualMachineScaleSets'),parameters('aksSystemNodeAvailabilityZone'),json('[]'))]",
                        "maxPods": "[parameters('aksSystemNodeMaxPods')]",
                        "enableEncryptionAtHost": "[parameters('aksEnableEncryptionAtHost')]",
                        "enableFIPS": "[parameters('aksEnableFips')]",
                        "enableUltraSSD": "[parameters('aksEnableUltraSsd')]",
                        "enableNodePublicIP": "[parameters('aksEnableNodePublicIp')]"
                    },
                    {
                        "name": "[parameters('aksUserNodePoolName')]",
                        "mode": "User",
                        "type": "[parameters('aksUserNodeVmPoolType')]",
                        "nodeLabels": "[parameters('aksUserNodeLabels')]",
                        "nodeTaints": "[parameters('aksUserNodeTaints')]",
                        "count": "[parameters('aksUserNodeCount')]",
                        "vmSize": "[parameters('aksUserNodeSize')]",
                        "osType": "[parameters('aksUserNodeType')]",
                        "osSKU": "[parameters('aksUserNodeOsSku')]",
                        "osDiskSizeGB": "[parameters('aksUserOsDiskSize')]",
                        "vnetSubnetID": "[variables('aksSubnetId')]",
                        "podSubnetID": "[variables('podSubnetId')]",
                        "maxCount": "[parameters('aksUserNodeMax')]",
                        "minCount": "[parameters('aksUserNodeMin')]",
                        "enableAutoScaling": "[parameters('aksUserNodeAutoScaling')]",
                        "scaleSetPriority": "[parameters('aksUserNodeScaleSetPriority')]",
                        "scaleSetEvictionPolicy": "[parameters('aksUserNodeScaleSetEvictionPolicy')]",
                        "availabilityZones": "[if(equals(parameters('aksUserNodeVmPoolType'),'VirtualMachineScaleSets'),parameters('aksUserNodeAvailabilityZone'),json('[]'))]",
                        "maxPods": "[parameters('aksUserNodeMaxPods')]",
                        "enableEncryptionAtHost": "[parameters('aksEnableEncryptionAtHost')]",
                        "enableFIPS": "[parameters('aksEnableFips')]",
                        "enableUltraSSD": "[parameters('aksEnableUltraSsd')]",
                        "enableNodePublicIP": "[parameters('aksEnableNodePublicIp')]"
                    }
                ]
            },
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'configureSubnets')]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdName'))]",
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
            ]
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces",
            "apiVersion": "2022-10-01",
            "condition": "[and(parameters('createAnalyticsWorkspace'), parameters('deployLogAnalytics'))]",
            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.OperationalInsights/workspaces'), parameters('tagsByResource')['Microsoft.OperationalInsights/workspaces'], json('{}')) ]",
            "name": "[parameters('workspaceName')]",
            "location": "[parameters('location')]",
            "properties": {
                "sku": {
                    "name": "[parameters('logAnalyticsSku')]"
                }
            }
        },
        {
        "type": "Microsoft.Insights/diagnosticSettings",
        "apiVersion": "2021-05-01-preview",
        "scope": "[format('Microsoft.ContainerService/managedClusters/{0}', parameters('aksClusterName'))]",
        "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Insights/diagnosticSettings'), parameters('tagsByResource')['Microsoft.Insights/diagnosticSettings'], json('{}')) ]",
        "name": "default",
        "properties": {
          "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]",
          "logs": [
            {
              "category": "kube-apiserver",
              "enabled": true
            },
            {
              "category": "kube-audit",
              "enabled": true
            },
            {
              "category": "kube-audit-admin",
              "enabled": true
            },
            {
              "category": "kube-controller-manager",
              "enabled": true
            },
            {
              "category": "kube-scheduler",
              "enabled": true
            },
            {
              "category": "cluster-autoscaler",
              "enabled": true
            },
            {
              "category": "guard",
              "enabled": true
            }
          ],
          "metrics": [
            {
              "category": "AllMetrics",
              "enabled": true
            }
          ]
        },
        "dependsOn": [
          "[resourceId('Microsoft.ContainerService/managedClusters', parameters('aksClusterName'))]",
          "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
        ]
      }
    ],
    "outputs": {

    }
}