---
- name: Install Instana standard on a RHEL virtual machine
  hosts: localhost
  gather_facts: yes
  become: true

  vars:
    ansible_python_interpreter: "/usr/bin/python3"
    log_level: "info"
    instana:
      download_key: ""
      sales_key: ""
      tenant_name: ""
      unit_name: ""
      accept_license: false
      admin_password: ""
      install_type: "demo"
      domain: ""
    tls:
      cert: ""
      key: ""
    osdisk:
      var:
        size: 60
      home:
        size: 40
    disks:
      - name: data
        size: 150
        mount_point: "/mnt/instana/stanctl/data"
      - name: metrics
        size: 300
        mount_point: "/mnt/instana/stanctl/metrics"
      - name: analytics
        size: 500
        mount_point: "/mnt/instana/stanctl/analytics"  
      - name: objects
        size: 250
        mount_point: "/mnt/instana/stanctl/objects"           
    dir:
      tmp_dir: "/tmp"
      bin_dir: "/usr/local/bin"
    default:
      retries: 1
      timeout: 1830
      poll: 60


  tasks: 
  
  - name: Install required packages if not already in place
    ansible.builtin.package:
      name: 
        - parted
        - jq
      state: latest  

  - name: Check root volume
    block:

    - name: Get the mount details
      ansible.builtin.set_fact:
        root_size: "{{ (ansible_facts.mounts | selectattr(\"mount\", \"equalto\", \"/\") | list)[0].size_total }}"

    - name: Set flag on whether the root disk size is sufficient
      set_fact:
        disk_size_okay: "{{ True if ( (root_size | int / 1024 / 1024 / 1024) >= osdisk.home.size ) else False }}"

    - name: Prepare OS disk
      ansible.builtin.include_tasks:
        file: ./extend-os-disk.yaml
      when: not disk_size_okay

  - name: Prepare additional disks
    ansible.builtin.include_tasks:
      file: ./prepare-disks.yaml
    loop: "{{ disks }}"
    loop_control:
      loop_var: disk

  - name: Configure path for binaries for user
    block:
    - name: Query current path setting in bashrc
      ansible.builtin.shell:  
        cmd: "cat ~{{ ansible_facts.user_id }}/.bashrc | grep /usr/local/bin || true"
      args:
        executable: /bin/bash
      register: response
      become_user: "{{ ansible_facts.user_id }}"

    - name: Check if response contains /usr/local/bin
      ansible.builtin.set_fact:
        path_added: "{{ True if( response.stdout != '' ) else False }}"

    - name: Add /usr/local/bin directory to {{ ansible_facts.user_id }}
      ansible.builtin.shell: 
        cmd: "echo 'export PATH=$PATH:/usr/local/bin' >> ~{{ ansible_facts.user_id }}/.bashrc"
      args:
        executable: /bin/bash
      when: not path_added
      become_user: "{{ ansible_facts.user_id }}"

  - name: Add firewall rules
    ansible.builtin.shell: |
      set timeout 300
      firewall-cmd --permanent --add-port=22/tcp
      firewall-cmd --permanent --add-port=80/tcp
      firewall-cmd --permanent --add-port=443/tcp
      firewall-cmd --permanent --add-port=6443/tcp
      firewall-cmd --permanent --add-port=8443/tcp
      firewall-cmd --permanent --add-port=10250/tcp
      firewall-cmd --permanent --zone=trusted --add-source=10.42.0.0/16
      firewall-cmd --permanent --zone=trusted --add-source=10.43.0.0/16
      firewall-cmd --reload
      exit 0
    args:
      executable: /bin/bash

  - name: Add Instana repository
    ansible.builtin.template:
      src: "./instana-product.repo.j2"
      dest: "/etc/yum.repos.d/Instana-Product.repo"

  - name: Install stanctl command-line tool
    ansible.builtin.package:
      name: 
        - stanctl
      state: latest

  - name: Run Instana preflight shell script
    ansible.builtin.script: ./stanctl-preflight.sh
    args: 
      executable: /bin/bash
    register: response

  - name: Output preflight result
    ansible.builtin.debug:
      msg: "{{ response.stdout }}"
    when: log_level == "debug"

  - name: Message if license not accepted
    ansible.builtin.debug:
      msg: "License not accepted. Instana not started. Please start manually"
    when: not instana.accept_license

  - name: Start Instana
    ansible.builtin.include_tasks:
      file: ./start-instana.yaml
    when: instana.accept_license
    
    
