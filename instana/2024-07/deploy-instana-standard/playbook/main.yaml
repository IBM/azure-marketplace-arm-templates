---
- name: Install Instana standard on a RHEL virtual machine
  hosts: localhost
  gather_facts: yes
  become: true

  vars:
    ansible_python_interpreter: "/usr/bin/python3"
    log_level: "info"
    instana:
      download_key: ""
      sales_key: ""
      tenant_name: ""
      unit_name: ""
      accept_license: false
      admin_password: ""
      install_type: "demo"
      domain: ""
    tls:
      cert: ""
      key: ""
    osdisk:
      var:
        size: 60
      home:
        size: 40
    disks:
      - name: data
        size: "150.00 GB"
        mount_point: "/mnt/instana/stanctl/data"
      - name: metrics
        size: "300.00 GB"
        mount_point: "/mnt/instana/stanctl/metrics"
      - name: analytics
        size: "500.00 GB"
        mount_point: "/mnt/instana/stanctl/analytics"  
      - name: objects
        size: "250.00 GB"
        mount_point: "/mnt/instana/stanctl/objects"           
    dir:
      tmp_dir: "/tmp"
      bin_dir: "/usr/local/bin"


  tasks: 
  
  - name: Install required packages if not already in place
    ansible.builtin.package:
      name: 
        - parted
      state: latest  

  - name: Get the mount details
    ansible.builtin.set_fact:
      root_size: "{{ (ansible_facts.mounts | selectattr(\"mount\", \"equalto\", \"/\") | list)[0].size_total }}"

  - name: Set okay if larger than required
    set_fact:
      disk_size_okay: true
    when: (root_size | int / 1024 / 1024 / 1024) >= osdisk.home.size

  - name: Set not okay if smaller than required
    set_fact:
      disk_size_okay: false
    when: (root_size | int / 1024 / 1024 / 1024) < osdisk.home.size

  - name: Prepare OS disk
    ansible.builtin.include_tasks:
      file: ./extend-os-disk.yaml
    when: not disk_size_okay

  - name: Prepare additional disks
    ansible.builtin.include_tasks:
      file: ./prepare-disks.yaml
    loop: "{{ disks }}"
    loop_control:
      loop_var: disk

  # - name: Configure kernel parameters - vm.swappiness
  #   ansible.builtin.shell: |
  #     set timeout 300
  #     sh -c 'echo vm.swappiness=0 >> /etc/sysctl.d/99-stanctl.conf'
  #     sysctl -p /etc/sysctl.d/99-stanctl.conf
  #     exit 0
  #   args:
  #     executable: /bin/bash

  # - name: Configure kernel parameters - transparent hub pages
  #   ansible.builtin.shell: |
  #     set timeout 300
  #     grubby --args="transparent_hugepage=never" --update-kernel ALL
  #     exit 0
  #   args:
  #     executable: /bin/bash 

  - name: Add bin directory (for RHEL)
    ansible.builtin.shell: echo 'export PATH=$PATH:/usr/local/bin' >> ~root/.bashrc
    args:
      executable: /bin/bash

  - name: Add firewall rules
    ansible.builtin.shell: |
      set timeout 300
      firewall-cmd --permanent --add-port=22/tcp
      firewall-cmd --permanent --add-port=80/tcp
      firewall-cmd --permanent --add-port=443/tcp
      firewall-cmd --permanent --add-port=6443/tcp
      firewall-cmd --permanent --add-port=8443/tcp
      firewall-cmd --permanent --add-port=10250/tcp
      firewall-cmd --permanent --zone=trusted --add-source=10.42.0.0/16
      firewall-cmd --permanent --zone=trusted --add-source=10.43.0.0/16
      firewall-cmd --reload
      exit 0
    args:
      executable: /bin/bash

  - name: Add Instana repository
    ansible.builtin.template:
      src: "./instana-product.repo.j2"
      dest: "/etc/yum.repos.d/Instana-Product.repo"

  - name: Install stanctl command-line tool
    ansible.builtin.package:
      name: 
        - stanctl
      state: latest

  - name: Run Instana preflight shell script
    ansible.builtin.script: ./stanctl-preflight.sh
    args: 
      executable: /bin/bash
    register: response

  - name: Output preflight result
    ansible.builtin.debug:
      msg: "{{ response.stdout }}"
    when: log_level == "debug"

  - name: Message if license not accepted
    ansible.builtin.debug:
      msg: "License not accepted. Instana not started. Please start manually"
    when: not instana.accept_license

  - name: Start Instana
    when: instana.accept_license
    block:
  
    - name: First attempt to start Instana
      ansible.builtin.shell: |
        set timeout 3000
        stanctl up --install-type {{ instana.install_type }} \
          --download-key {{ instana.download_key }} \
          --sales-key {{ instana.sales_key }} \
          --unit-tenant-name {{ instana.tenant_name }} \
          --unit-unit-name {{ instana.unit_name }} \
          --unit-initial-admin-password {{ instana.admin_password }} \
          --core-base-domain {{ instana.domain }} \
          --core-tls-generate-cert \
          --quiet
        exit 0
      args:
        executable: /bin/bash
        chdir: "{{ ansible_facts.user_dir }}"
      become: yes
      become_user: "{{ ansible_facts.user_id }}"
      register: response

    - name: Output install result
      ansible.builtin.debug:
        msg: "{{ response.stdout }}"
      when: 
      - log_level == "debug"

    - name: Determine if successful
      ansible.builtin.set_fact:
        successful: "{{ True if( response.stderr == \"\" ) else False }}"

    - name: Second attempt to start Instana
      ansible.builtin.shell: |
        set timeout 3000
        stanctl up --install-type {{ instana.install_type }} \
          --download-key {{ instana.download_key }} \
          --sales-key {{ instana.sales_key }} \
          --unit-tenant-name {{ instana.tenant_name }} \
          --unit-unit-name {{ instana.unit_name }} \
          --unit-initial-admin-password {{ instana.admin_password }} \
          --core-base-domain {{ instana.domain }} \
          --core-tls-generate-cert \
          --quiet
        exit 0
      args:
        executable: /bin/bash
        chdir: "{{ ansible_facts.user_dir }}"
      become: yes
      become_user: "{{ ansible_facts.user_id }}"
      when: 
      - not successful
      register: response

    - name: Fail if unsuccessful second time
      ansible.builtin.fail:
        msg: "Unable to start Instana after two attempts"
      when:
      - response.stderr != ""      

    - name: Output install result
      ansible.builtin.debug:
        msg: "{{ response.stdout }}"
      when: 
        - log_level == "debug"

