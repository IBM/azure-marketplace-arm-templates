---

- name: Output name of disk to be prepared
  debug:
    msg: "Preparing disk {{ disk.name }} of size {{ disk.size }}"

- name: Update host facts
  ansible.builtin.gather_facts:

- name: Check if already mounted
  ansible.builtin.shell: mount | grep {{ disk.mount_point }} || true
  register: response

- name: If already mount, set flag
  set_fact:
    disk_mounted: true
  when: response.stdout != ""

- name: If not already mount, set flag
  set_fact:
    disk_mounted: false
  when: response.stdout == ""

- name: Create mount points
  ansible.builtin.file:
    path: "{{ disk.mount_point }}"
    state: directory

- set_fact:
    available_disks: []

- name: Get list of available devices
  set_fact:
    available_disks: "{{ available_disks | default({}) | union([{ 'name': item.key, 'size': item.value.size} ]) }}"
  with_dict: "{{ ansible_facts.devices }}"
  when: 
  - item.value.partitions | length == 0
  - item.value.size == disk.size

- fail:
    msg: "No available disks found with size {{ disk.size }}"
  when: 
  - available_disks | length == 0
  - not disk_mounted

- set_fact:
    disk_device: "/dev/{{ available_disks[0].name }}"
  when:
  - not disk_mounted

- debug:
    msg: "Found disk {{ disk_device }}"
  when:
  - not disk_mounted

- name: Create disk partition
  ansible.builtin.shell: parted -s -a optimal {{ disk_device }} "mkpart primary ext4 0% 100%"
  args:
    executable: /bin/bash
  register: response
  when: not disk_mounted

- name: Format the filesystem
  ansible.builtin.shell: mkfs.xfs -f {{ disk_device }}1
  args:
    executable: /bin/bash
  when: not disk_mounted

- name: Mount the filesystem
  ansible.builtin.shell: mount -t xfs {{ disk_device }}1 {{ disk.mount_point }}
  when: not disk_mounted

- name: Add filesystem to fstab
  ansible.builtin.shell: echo "{{ disk_device }}1 {{ disk.mount_point }} xfs defaults 0 0" >> /etc/fstab
  when: not disk_mounted

