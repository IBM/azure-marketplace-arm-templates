{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "namePrefix": {
            "type": "string",
            "minLength": 3,
            "maxLength": 10,
            "metadata": {
                "description": "Prefix for resource names"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Azure location for resources"
            }
        },
        "downloadKey": {
            "type": "secureString",
            "metadata": {
                "description": "Instana download key"
            }
        },
        "salesKey": {
            "type": "secureString",
            "metadata": {
                "description": "Instana sales key"
            }
        },
        "instanaPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Instana administrator password"
            }
        },
        "tenantName": {
            "type": "string",
            "metadata": {
                "description": "Tenant name for Instana"
            }
        },
        "unitName": {
            "type": "string",
            "metadata": {
                "description": "Unit name for Instana"
            }
        },
        "vmName": {
            "type": "string",
            "defaultValue": "[concat(parameters('namePrefix'),'-vm')]",
            "metadata": {
                "description": "Name for the Azure virtual machine"
            }
        },
        "vnetName": {
            "type": "string",
            "defaultValue": "vnet",
            "metadata": {
                "description": "Virtual network name"
            }
        },
        "virtualNetworkNewOrExisting":{
            "type": "string",
            "defaultValue": "new",
            "allowedValues": [
                "new",
                "existing"
            ],
            "metadata": {
                "description": "Flag to indicate whether a new virtual network should be created (true), or use an existing one (false)."
            }
        },
        "virtualNetworkResourceGroupName": {
            "type": "string",
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
                "description": "Name of the resource group for the existing virtual network"
            }
        },
        "vnetCIDR": {
            "type": "string",
            "defaultValue": "10.0.0.0/20",
            "metadata": {
                "description": "CIDR for the virtual network if being created."
            }
        },
        "subnetName": {
            "type": "string",
            "defaultValue": "vm-subnet",
            "metadata": {
                "description": "Subnet name to attach to VM"
            }
        },
        "subnetCIDR": {
            "type": "string",
            "defaultValue": "10.0.0.0/24",
            "metadata": {
                "description": "CIDR for the developer subnet"
            }
        },
        "adminUserName": {
            "type": "string",
            "defaultValue": "azureuser",
            "metadata": {
                "description": "Admin user for created VMs"
            }
        },
        "adminPassword": {
            "type": "secureString",
            "metadata": {
                "description": "SSH Key or password for the Virtual Machine."
            }
        },
        "authType": {
            "type": "string",
            "defaultValue": "sshPublicKey",
            "allowedValues": [
                "sshPublicKey",
                "password"
            ],
            "metadata": {
                "description": "Type of VM authentication. SSH Key or Password"
            }
        },
        "securityType": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Standard",
                "TrustedLaunch"
            ],
            "metadata": {
                "description": "Security type for virtual machine (trusted launch not supported with RHEL)"
            }
        },
        "vmNsgSecurityRules": {
            "type": "array",
            "defaultValue": [
                {
                    "name": "SSH",
                    "properties": {
                        "priority": 300,
                        "protocol": "TCP",
                        "access": "Allow",
                        "direction": "Inbound",
                        "sourceAddressPrefix": "*",
                        "sourcePortRange": "*",
                        "destinationAddressPrefix": "*",
                        "destinationPortRange": "22"
                    }
                }
            ]
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_D16s_v3",
            "allowedValues": [
                "Standard_D16s_v3",
                "Standard_D32s_v3"
            ],
            "metadata": {
                "description": "Size of Virtual Machine"
            }
        },
        "vmDiskType": {
            "type": "string",
            "defaultValue": "Premium_LRS",
            "allowedValues": [
                "Premium_LRS",
                "Premium_ZRS",
                "Standard_LRS",
                "StandardSSD_LRS",
                "StandardSSD_ZRS",
                "UltraSSD_LRS"
            ],
            "metadata": {
                "description": "OS Disk type for Dev VM"
            }
        },
        "vmZone": {
            "type": "string",
            "defaultValue": "1",
            "allowedValues": [
                "1", "2", "3"
            ],
            "metadata": {
                "description": "Availability zone for the VM"
            }
        },
        "vmOSVersion": {
            "type": "string",
            "defaultValue": "RHEL 8.7",
            "allowedValues": [
                "RHEL 8.6",
                "RHEL 8.7",
                "RHEL 9.2"
            ],
            "metadata": {
                "description": "Operating system version"
            }
        },
        "storageSKU": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "allowedValues": [
                "Premium_LRS",
                "Premium_ZRS",
                "Standard_LRS",
                "StandardSSD_LRS",
                "StandardSSD_ZRS",
                "UltraSSD_LRS"
            ],
            "metadata": {
                "description": "OS Disk type for Dev VM"
            }
        },
        "osDiskSize": {
            "type": "int",
            "defaultValue": 200,
            "metadata": {
               "description": "Size of the OS Disk (GB)" 
            }
        },
        "dataDiskSize": {
            "type": "int",
            "defaultValue": 150,
            "minValue": 150,
            "metadata": {
                "description": "Size of the data directory (GB)"
            }
        },
        "metricsDiskSize": {
            "type": "int",
            "defaultValue": 300,
            "minValue": 300,
            "metadata": {
                "description": "Size of the metrics directory (GB)"
            }
        },
        "analyticsDiskSize": {
            "type": "int",
            "defaultValue": 500,
            "minValue": 500,
            "metadata": {
                "description": "Size of the analytics directory (GB)"
            }
        },
        "objectsDiskSize": {
            "type": "int",
            "defaultValue": 500,
            "minValue": 250,
            "metadata": {
                "description": "Size of the objects directory (GB)"
            }
        },
        "createPublicIP": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Flag to indicate whether a public ip address should be used."
            }
        },
        "publicIpNewOrExisting": {
            "type": "string",
            "defaultValue": "new",
            "allowedValues": [
                "new",
                "existing"
            ],
            "metadata": {
                "description": "Flag to determine whether the public IP is existing or not"
            }
        },
        "publicIpResourceGroup": {
            "type": "string",
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
                "description": "Resource group for public IP address if using an existing one"
            }
        },
        "publicIPName": {
            "type": "string",
            "defaultValue": "[concat(parameters('namePrefix'),'-pip')]",
            "metadata": {
                "description": "Name for the public IP address if creating."
            }
        },
        "domainName": {
            "type": "string",
            "defaultValue": "[toLower( concat(parameters('namePrefix'),uniqueString(resourceGroup().name)) )]",
            "metadata": {
                "description": "Domain name prefix for the public IP address"
            }
        },
        "deployInstana": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Flag to enable or disable deployment of Instana on VM"
            }
        },
        "logLevel": {
            "type": "string",
            "defaultValue": "info",
            "allowedValues": [
                "info",
                "debug"
            ],
            "metadata": {
                "description": "Log level for Ansible playbook"
            }
        },
        "branch": {
            "type": "string",
            "defaultValue": "main",
            "metadata": {
                "description": "Github branch for installation script"
            }
        },
        "deploymentVersion": {
            "type": "string",
            "defaultValue": "2024-03",
            "metadata": {
                "description": "Deployment version to use"
            }
        },
        "tagsByResource": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "Tags for resources"
            }
        }
    },
    "variables": {
        "baseUrl": "[uri('https://raw.githubusercontent.com/IBM/azure-marketplace-arm-templates/',parameters('branch'))]",
        "nsgName": "[concat(parameters('namePrefix'), '-nsg')]",
        "nicName": "[concat(parameters('namePrefix'),'-nic')]",
        "linuxConfigSSH": {
            "disablePasswordAuthentication": true,
            "ssh": {
                "publicKeys": [
                    {
                        "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('adminUsername'))]",
                        "keyData": "[parameters('adminPassword')]"
                    }
                ]
            }
        },
        "linuxConfigPWD": {
            "disablePasswordAuthentication": false
        },
        "imageReference": {
            "RHEL 8.6": {
                "publisher": "RedHat",
                "offer": "RHEL",
                "sku": "8_6",
                "version": "latest"
            },
            "RHEL 8.7": {
                "publisher": "RedHat",
                "offer": "RHEL",
                "sku": "8_7",
                "version": "latest"
            },
            "RHEL 9.2": {
                "publisher": "RedHat",
                "offer": "RHEL",
                "sku": "9_2",
                "version": "latest"
            }
        },
        "vmBootstrap": "[concat('#cloud-config\npackage_upgrade: true\npackages:\n- python3.11\n- python3.11-pip\nruncmd:\n- python3.11 -m pip install ansible-core==2.16.3')]",
        "securityProfile": {
            "uefiSettings": {
                "secureBootEnabled": false,
                "vTpmEnabled": false
            },
            "securityType": "[parameters('securityType')]"
        },
        "publicIpId": {
            "new": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPName'))]"
            },
            "existing": {
                "id": "[resourceId(parameters('publicIpResourceGroup'),'Microsoft.Network/publicIPAddresses', parameters('publicIPName'))]"
            }
        },
        "vnetId": {
            "new": "[resourceId('Microsoft.Network/virtualNetworks',parameters('vnetName'))]",
            "existing": "[resourceId(parameters('virtualNetworkResourceGroupName'),'Microsoft.Network/virtualNetworks',parameters('vnetName'))]"
        },
        "subnetId": "[concat(variables('vnetId')[parameters('virtualNetworkNewOrExisting')],'/subnets/',parameters('subnetName'))]",
        "scriptParameters": {
            "ansible_python_interpreter": "/usr/bin/python3",
            "log_level": "[parameters('logLevel')]",
            "instana": {
                "download_key": "[parameters('downloadKey')]",
                "sales_key": "[parameters('salesKey')]",
                "tenant_name": "[parameters('tenantName')]",
                "unit_name": "[parameters('unitName')]",
                "accept_license": false,
                "admin_password": "[parameters('instanaPassword')]"
            },
            "tls": {
                "cert": "",
                "key": ""
            },
            "disks": [
                {
                    "name": "data",
                    "size": "[concat(parameters('dataDiskSize'),'.00 GB')]",
                    "mount_point": "/mnt/instana/stanctl/data"
                },
                {
                    "name": "metrics",
                    "size": "[concat(parameters('metricsDiskSize'),'.00 GB')]",
                    "mount_point": "/mnt/instana/stanctl/metrics"
                },
                {
                    "name": "analytics",
                    "size": "[concat(parameters('analyticsDiskSize'),'.00 GB')]",
                    "mount_point": "/mnt/instana/stanctl/analytics"
                },
                {
                    "name": "objects",
                    "size": "[concat(parameters('objectsDiskSize'),'.00 GB')]",
                    "mount_point": "/mnt/instana/stanctl/objects"
                }
            ],
            "dir": {
                "tmp_dir": "/tmp",
                "bin_dir": "/usr/local/bin"
            }
        }
    },
    "resources": [
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2020-11-01",
            "condition": "[equals(parameters('virtualNetworkNewOrExisting'),'new')]",
            "comments": "Create a new virtual network if requested.",
            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/virtualNetworks'), parameters('tagsByResource')['Microsoft.Network/virtualNetworks'], json('{}')) ]",
            "name": "[parameters('vnetName')]",
            "location": "[parameters('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('vnetCIDR')]"
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks/subnets",
            "apiVersion": "2020-11-01",
            "condition": "[equals(parameters('virtualNetworkNewOrExisting'),'new')]",
            "name": "[concat(parameters('vnetName'),'/',parameters('subnetName'))]",
            "properties": {
                "addressPrefix": "[parameters('subnetCIDR')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
            ]
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2022-07-01",
            "condition": "[and(parameters('createPublicIP'),equals(parameters('publicIpNewOrExisting'),'new'))]",
            "name": "[parameters('publicIPName')]",
            "location": "[parameters('location')]",
            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/publicIPAddresses'), parameters('tagsByResource')['Microsoft.Network/publicIPAddresses'], json('{}')) ]",
            "sku": {
                "name": "Standard",
                "tier": "Regional"
            },
            "zones": [
                "1",
                "2",
                "3"
            ],
            "properties": {
                "publicIPAllocationMethod": "Static",
                "deleteOption": "Delete",
                "publicIPAddressVersion": "IPv4",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('domainName')]"
                }
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2022-07-01",
            "name": "[variables('nicName')]",
            "location": "[parameters('location')]",
            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/networkInterfaces'), parameters('tagsByResource')['Microsoft.Network/networkInterfaces'], json('{}')) ]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "subnet": {
                                "id": "[variables('subnetId')]"
                            },
                            "publicIPAddress": "[if(parameters('createPublicIP'),variables('publicIpId')[parameters('publicIpNewOrExisting')],json('null'))]",
                            "privateIPAllocationMethod": "Dynamic"
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]",
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPName'))]"
            ]
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2022-07-01",
            "name": "[variables('nsgName')]",
            "location": "[parameters('location')]",
            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/networkSecurityGroups'), parameters('tagsByResource')['Microsoft.Network/networkSecurityGroups'], json('{}')) ]",
            "properties": {
                "securityRules": "[parameters('vmNsgSecurityRules')]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2021-03-01",
            "name": "[parameters('vmName')]",
            "location": "[parameters('location')]",
            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Compute/virtualMachines'), parameters('tagsByResource')['Microsoft.Compute/virtualMachines'], json('{}')) ]",
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "storageProfile": {
                    "osDisk": {
                        "createOption": "FromImage",
                        "diskSizeGB": "[parameters('osDiskSize')]",
                        "managedDisk": {
                            "storageAccountType": "[parameters('vmDiskType')]"
                        }
                    },
                    "dataDisks": [
                        {
                            "name": "[concat(parameters('namePrefix'),'-data-disk')]",
                            "caching": "None",
                            "createOption": "Empty",
                            "deleteOption": "Delete",
                            "diskSizeGB": "[parameters('dataDiskSize')]",
                            "lun": 0,
                            "managedDisk": {
                                "storageAccountType": "[parameters('storageSKU')]"
                            }
                        },
                        {
                            "name": "[concat(parameters('namePrefix'),'-metrics-disk')]",
                            "caching": "None",
                            "createOption": "Empty",
                            "deleteOption": "Delete",
                            "diskSizeGB": "[parameters('metricsDiskSize')]",
                            "lun": 1,
                            "managedDisk": {
                                "storageAccountType": "[parameters('storageSKU')]"
                            }
                        },
                        {
                            "name": "[concat(parameters('namePrefix'),'-analytics-disk')]",
                            "caching": "None",
                            "createOption": "Empty",
                            "deleteOption": "Delete",
                            "diskSizeGB": "[parameters('analyticsDiskSize')]",
                            "lun": 2,
                            "managedDisk": {
                                "storageAccountType": "[parameters('storageSKU')]"
                            }
                        },
                        {
                            "name": "[concat(parameters('namePrefix'),'-objects-disk')]",
                            "caching": "None",
                            "createOption": "Empty",
                            "deleteOption": "Delete",
                            "diskSizeGB": "[parameters('objectsDiskSize')]",
                            "lun": 3,
                            "managedDisk": {
                                "storageAccountType": "[parameters('storageSKU')]"
                            }
                        }
                    ],
                    "imageReference": "[variables('imageReference')[parameters('vmOSVersion')]]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
                        }
                    ]
                },
                "osProfile": {
                    "computerName": "[parameters('vmName')]",
                    "adminUsername": "[parameters('adminUserName')]",
                    "adminPassword": "[parameters('adminPassword')]",
                    "customData": "[base64(variables('vmBootstrap'))]",
                    "linuxConfiguration": "[if(equals(parameters('authType'), 'sshPublicKey'), variables('linuxConfigSSH'), variables('linuxConfigPWD'))]"
                },
                "securityProfile": "[if(equals(parameters('securityType'), 'TrustedLaunch'),variables('securityProfile'),json('null'))]",
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true
                    }
                }
            },
            "zones": [
                "[parameters('vmZone')]"
            ],
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2023-03-01",
            "location": "[parameters('location')]",
            "name": "[concat(parameters('vmName'),'/','installInstana')]",
            "condition": "[parameters('deployInstana')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "protectedSettings": {
                    "fileUris": [
                        "[uri(variables('baseUrl'),concat(parameters('branch'),'/instana/',parameters('deploymentVersion'),'/deploy-instana-standard/playbook/main.yaml'))]",
                        "[uri(variables('baseUrl'),concat(parameters('branch'),'/instana/',parameters('deploymentVersion'),'/deploy-instana-standard/playbook/prepare-disks.yaml'))]",
                        "[uri(variables('baseUrl'),concat(parameters('branch'),'/instana/',parameters('deploymentVersion'),'/deploy-instana-standard/playbook/instana-product.repo.j2'))]",
                        "[uri(variables('baseUrl'),concat(parameters('branch'),'/instana/',parameters('deploymentVersion'),'/deploy-instana-standard/wait-for-cloud-init.sh'))]"
                    ],
                    "commandToExecute": "[concat('/bin/bash ./wait-for-cloud-init.sh','&& echo ',replace(string(variables('scriptParameters')), '\"', '\\\"'),'> ./parameter.json')]"
                }
            }
        }
    ]
}