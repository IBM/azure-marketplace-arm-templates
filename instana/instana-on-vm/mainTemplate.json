{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Azure region into which to deploy resources"
            }
        },
        "networkResourceGroup": {
            "type": "string",
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
                "description": "Name of the resource group for the virtual network"
            }
        },
        "vnetName": {
            "type": "string",
            "defaultValue": "vnet",
            "metadata": {
                "description": "Name of the virtual network"
            }
        },
        "vnetCidr": {
            "type": "string",
            "defaultValue": "10.0.0.0/24",
            "metadata": {
                "description": "CIDR for the Virtual Network"
            }
        },
        "enableDdosProtection": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Flag to determine whether to enable DDoS protection for the virtual network"
            }
        },
        "existingDdosPlan": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Flag to determine whether to create a new DDoS protection service or use an existing one."
            }
        },
        "ddosProtectionPlanName": {
            "type": "string",
            "defaultValue": "Instana-DDoS-Plan",
            "metadata": {
                "description": "DDoS protection plan name to be used if DDoS is enabled"
            }
        },
        "vmSubnetName": {
            "type": "string",
            "defaultValue": "vm-subnet",
            "metadata": {
                "description": "Name of the subnet for the virtual machine(s)"
            }
        },
        "vmSubnetCidr": {
            "type": "string",
            "defaultValue": "10.0.0.0/27",
            "metadata": {
                "description": "CIDR for the VM subnet"
            }
        },
        "createVnet": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Flag to determine whether to use a new or existing VNet"
            }
        },
        "nsgName": {
            "type": "string",
            "defaultValue": "instana-nsg",
            "metadata": {
                "description": "Name of the network security group"
            }
        },
        "deployVM": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Flag to determine whether to deploy the virtual machine and Instana"
            }
        },
        "vmName": {
            "type": "string",
            "defaultValue": "instana-vm",
            "metadata": {
                "description": "Name of the virtual machine that will host Instana"
            }
        },
        "securityType": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Standard",
                "TrustedLaunch"
            ],
            "metadata": {
                "description": "Security type for virtual machine (trusted launch not supported with RHEL)"
            }
        },
        "adminUserName": {
            "type": "string",
            "defaultValue": "azureuser",
            "metadata": {
                "description": "Admin user for created VMs"
            }
        },
        "adminPassword": {
            "type": "secureString",
            "metadata": {
                "description": "Initial SSH Key or password for node 1."
            }
        },
        "authType": {
            "type": "string",
            "defaultValue": "sshPublicKey",
            "allowedValues": [
                "sshPublicKey",
                "password"
            ],
            "metadata": {
                "description": "Type of VM authentication for initial node 1 configuration. SSH Key or Password"
            }
        },
        "storageSKU": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "allowedValues": [
                "Premium_LRS",
                "Premium_ZRS",
                "Standard_LRS",
                "StandardSSD_LRS",
                "StandardSSD_ZRS",
                "UltraSSD_LRS"
            ],
            "metadata": {
                "description": "OS Disk type for Dev VM"
            }
        },
        "osVersion": {
            "type": "string",
            "defaultValue": "RHEL 9.2",
            "allowedValues": [
                "RHEL 8.7",
                "RHEL 9.2"
            ],
            "metadata": {
                "description": "Operating system version for the Instana virtual machine"
            }
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_D16s_v3",
            "metadata": {
                "description": "Size of the Instana virtual machine"
            }
        },
        "vmPublicIp": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Flag to determine whether to assign a public IP for the Instana virtual machine"
            }
        },
        "publicIpName": {
            "type": "string",
            "defaultValue": "instana-vm-pip",
            "metadata": {
                "description": "Name of the public IP resource either existing or new"
            }
        },
        "existingPublicIp": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Flag to determine whether the Public IP already exists."
            }
        },
        "publicIpResourceGroup": {
            "type": "string",
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
                "description": "Name of the resource group containing the public IP address."
            }
        },
        "vmDomainName": {
            "type": "string",
            "defaultValue": "[toLower(concat('i',substring(uniqueString(resourceGroup().id),0,8)))]",
            "metadata": {
                "description": "Domain name for VM public IP"
            }
        },
        "encryption": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Enables encryption at host on virtual machine"
            }
        },
        "dockerDiskSize": {
            "type": "int",
            "defaultValue": 20,
            "minValue": 1,
            "maxValue": 30,
            "metadata": {
                "description": "Size to extend the /var/lib/docker volume to accommodate the docker registry"
            }
        },
        "dataDiskSize": {
            "type": "int",
            "defaultValue": 5,
            "minValue": 1,
            "maxValue": 1024,
            "metadata": {
                "description": "Size of the data disk"
            }
        },
        "metricsDiskSize": {
            "type": "int",
            "defaultValue": 5,
            "minValue": 1,
            "maxValue": 1024,
            "metadata": {
                "description": "Size of the metrics disk"
            }
        },
        "tracesDiskSize": {
            "type": "int",
            "defaultValue": 5,
            "minValue": 1,
            "maxValue": 1024,
            "metadata": {
                "description": "Size of the traces disk"
            }
        },
        "downloadKey": {
            "type": "secureString",
            "metadata": {
                "description": "Instana download key"
            }
        },
        "salesKey": {
            "type": "secureString",
            "metadata": {
                "description": "Instana sales key"
            }
        },
        "instanaUsername": {
            "type": "string",
            "defaultValue": "admin@instana.local",
            "metadata": {
                "description": "Instana administrator email"
            }
        },
        "instanaPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Instana administrator password"
            }
        },
        "tenantName": {
            "type": "string",
            "metadata": {
                "description": "Tenant name for Instana"
            }
        },
        "envName": {
            "type": "string",
            "metadata": {
                "description": "Environment name for Instana"
            }
        },
        "agentType": {
            "type": "string",
            "defaultValue": "docker",
            "allowedValues": [
                "docker",
                "host"
            ],
            "metadata": {
                "description": "Instana host agent type for monitoring self"
            }
        },
        "agentMode": {
            "type": "string",
            "defaultValue": "INFRASTRUCTURE",
            "allowedValues": [
                "APM",
                "INFRASTRUCTURE"
            ],
            "metadata": {
                "description": "Instana host agent mode for monitoring self"
            }
        },
        "acceptLicense": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Accept the Instana license"
            }
        },
        "tagsByResource": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "Tags for resources"
            }
        },
        "branch": {
            "type": "string",
            "defaultValue": "main",
            "metadata": {
                "description": "Github branch for installation script"
            }
        }
    },
    "variables": {
        "imageRef": {
            "RHEL 8.7": {
                "publisher": "RedHat",
                "offer": "RHEL",
                "sku": "8_7",
                "version": "latest"
            },
            "RHEL 9.2": {
                "publisher": "RedHat",
                "offer": "RHEL",
                "sku": "9_2",
                "version": "latest"
            }
        },
        "ddosProtectionPlan": {
            "id": "[resourceId('Microsoft.Network/ddosProtectionPlans', parameters('ddosProtectionPlanName'))]"
        },
        "baseURL": "[uri('https://raw.githubusercontent.com/IBM/azure-marketplace-arm-templates/',parameters('branch'))]",
        "scriptOffset": "/instana/instana-on-vm/"
    },
    "resources": [
        {
            "type": "Microsoft.Network/ddosProtectionPlans",
            "apiVersion": "2021-05-01",
            "name": "[parameters('ddosProtectionPlanName')]",
            "condition": "[and(parameters('enableDdosProtection'),not(parameters('existingDdosPlan')))]",
            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/ddosProtectionPlans'), parameters('tagsByResource')['Microsoft.Network/ddosProtectionPlans'], json('{}')) ]",
            "location": "[parameters('location')]"
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2022-11-01",
            "name": "[parameters('vnetName')]",
            "condition": "[parameters('createVnet')]",
            "location": "[parameters('location')]",
            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/virtualNetworks'), parameters('tagsByResource')['Microsoft.Network/virtualNetworks'], json('{}')) ]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/ddosProtectionPlans', parameters('ddosProtectionPlanName'))]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('vnetCidr')]"
                    ]
                },
                "enableDdosProtection": "[parameters('enableDdosProtection')]",
                "ddosProtectionPlan": "[if(parameters('enableDdosProtection'),variables('ddosProtectionPlan'),json('null'))]"
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks/subnets",
            "apiVersion": "2023-04-01",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
            ],
            "name": "[concat(parameters('vnetName'), '/' ,parameters('vmSubnetName'))]",
            "properties": {
                "addressPrefix": "[parameters('vmSubnetCidr')]",
                "privateEndpointNetworkPolicies": "Disabled",
                "privateLinkServiceNetworkPolicies": "Disabled"
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "condition": "[parameters('deployVM')]",
            "name": "vmDeployment",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('vmSubnetName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "expressionEvaluationOptions": {
                    "scope": "Inner"
                },
                "parameters": {
                    "namePrefix": {
                        "value": "[parameters('vmName')]" 
                    },
                    "securityType": {
                        "value": "[parameters('securityType')]" 
                    },
                    "adminUserName": {
                        "value": "[parameters('adminUserName')]" 
                    },
                    "adminPassword": {
                        "value": "[parameters('adminPassword')]" 
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "storageSKU": {
                        "value": "[parameters('storageSKU')]" 
                    },
                    "imageRef": {
                        "value": "[variables('imageRef')[parameters('osVersion')]]" 
                    },
                    "vmSize": {
                        "value": "[parameters('vmSize')]" 
                    },
                    "dataDiskSize": {
                        "value": "[parameters('dataDiskSize')]"
                    },
                    "metricsDiskSize": {
                        "value": "[parameters('metricsDiskSize')]"
                    },
                    "tracesDiskSize": {
                        "value": "[parameters('tracesDiskSize')]"
                    },
                    "authType": {
                        "value": "[parameters('authType')]" 
                    },
                    "nsgName": {
                        "value": "[parameters('nsgName')]"
                    },
                    "publicIP": {
                        "value": "[parameters('vmPublicIp')]" 
                    },
                    "existingPublicIp": {
                        "value": "[parameters('existingPublicIp')]"
                    },
                    "publicIpName": {
                        "value": "[parameters('publicIpName')]" 
                    },
                    "publicIpResourceGroup": {
                        "value": "[parameters('publicIpResourceGroup')]"
                    },
                    "encryption": {
                        "value": "[parameters('encryption')]"
                    },
                    "domainName": {
                        "value": "[parameters('vmDomainName')]" 
                    },
                    "networkResourceGroup": {
                        "value": "[parameters('networkResourceGroup')]" 
                    },
                    "vnetName": {
                        "value": "[parameters('vnetName')]"
                    },
                    "subnetName": {
                        "value": "[parameters('vmSubnetName')]" 
                    },
                    "tagsByResource": {
                        "value": "[parameters('tagsByResource')]"
                    },
                    "scriptPath": {
                        "value": "[uri(variables('baseURL'),concat(parameters('branch'),variables('scriptOffset')))]" 
                    },
                    "scriptName": {
                        "value": "install-instana-rhel.sh" 
                    },
                    "instanaParameters": {
                        "value": {
                            "credentials": {
                                "downloadKey": "[parameters('downloadKey')]",
                                "salesKey": "[parameters('salesKey')]",
                                "instanaUsername": "[parameters('instanaUsername')]",
                                "instanaPassword": "[parameters('instanaPassword')]"
                            },
                            "config": {
                                "tenantName": "[parameters('tenantName')]",
                                "envName": "[parameters('envName')]",
                                "fqdn": "[concat(parameters('vmDomainName'),'.',parameters('location'),'.cloudapp.azure.com')]",
                                "dockerDiskSize": "[parameters('dockerDiskSize')]",
                                "dataDiskSize": "[parameters('dataDiskSize')]",
                                "metricsDiskSize": "[parameters('metricsDiskSize')]",
                                "tracesDiskSize": "[parameters('tracesDiskSize')]",
                                "agentType": "[parameters('agentType')]",
                                "agentMode": "[parameters('agentMode')]"
                            }
						}
					},
                    "acceptLicense": {
                        "value": "[parameters('acceptLicense')]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "namePrefix": {
                            "type": "string"
                        },
                        "securityType": {
                            "type": "string"
                        },
                        "adminUserName": {
                            "type": "string"
                        },
                        "adminPassword": {
                            "type": "secureString"
                        },
                        "vmSize": {
                            "type": "string"
                        },
                        "dataDiskSize": {
                            "type": "int"
                        },
                        "tracesDiskSize": {
                            "type": "int"
                        },
                        "metricsDiskSize": {
                            "type": "int"
                        },
                        "encryption": {
                            "type": "bool"
                        },
                        "storageSKU": {
                            "type": "string"
                        },
                        "imageRef": {
                            "type": "object"
                        },
                        "authType": {
                            "type": "string"
                        },
                        "location": {
                            "type": "string"
                        },
                        "networkResourceGroup": {
                            "type": "string"
                        },
                        "vnetName": {
                            "type": "string"
                        },
                        "subnetName": {
                            "type": "string"
                        },
                        "nsgName": {
                            "type": "string"
                        },
                        "publicIP": {
                            "type": "bool"
                        },
                        "existingPublicIp": {
                            "type": "bool"
                        },
                        "publicIpName": {
                            "type": "string"
                        },
                        "publicIpResourceGroup": {
                            "type": "string"
                        },
                        "domainName": {
                            "type": "string"
                        },
                        "tagsByResource": {
                            "type": "object"
                        },
                        "scriptPath": {
                            "type": "string"
                        },
                        "scriptName": {
                            "type": "string"
                        },
                        "instanaParameters": {
                            "type": "secureObject"
                        },
                        "acceptLicense": {
                            "type": "bool"
                        }
                    },
                    "variables": {
                        "nicName": "[concat(parameters('namePrefix'),'-nic')]",
                        "publicIP": {
                            "id": "[resourceId(parameters('publicIpResourceGroup'), 'Microsoft.Network/publicIPAddresses', parameters('publicIpName'))]"
                        },
                        "vmBootstrap": "[concat('#cloud-config\n runcmd:\n - yum update -y')]",
                        "securityProfile": {
                            "Standard": {
                                "encryptionAtHost": "[parameters('encryption')]"
                            },
                            "TrustedLaunch": {
                                "encryptionAtHost": "[parameters('encryption')]",
                                "uefiSettings": {
                                    "secureBootEnabled": true,
                                    "vTpmEnabled": true
                                },
                                "securityType": "[parameters('securityType')]"
                            }
                        },
                        "linuxConfigSSH": {
                            "disablePasswordAuthentication": true,
                            "ssh": {
                                "publicKeys": [
                                    {
                                        "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('adminUserName'))]",
                                        "keyData": "[parameters('adminPassword')]"
                                    }
                                ]
                            }
                        },
                        "linuxConfigPWD": {
                            "disablePasswordAuthentication": false
                        }
                    },
                    "resources": [
                        {
                            "type": "Microsoft.Network/networkSecurityGroups",
                            "apiVersion": "2022-11-01",
                            "name": "[parameters('nsgName')]",
                            "location": "[parameters('location')]",
                            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/networkSecurityGroups'), parameters('tagsByResource')['Microsoft.Network/networkSecurityGroups'], json('{}')) ]",
                            "properties": {
                                "securityRules": [
                                    {
                                        "name": "AllowAnySSHInbound",
                                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups/securityRules', parameters('nsgName'), 'AllowAnySSHInbound')]",
                                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                                        "properties": {
                                            "protocol": "TCP",
                                            "sourcePortRange": "*",
                                            "destinationPortRange": "22",
                                            "sourceAddressPrefix": "*",
                                            "destinationAddressPrefix": "*",
                                            "access": "Allow",
                                            "priority": 100,
                                            "direction": "Inbound"
                                        }
                                    },
                                    {
                                        "name": "AllowAnyHTTPInbound",
                                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups/securityRules', parameters('nsgName'), 'AllowAnyHTTPInbound')]",
                                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                                        "properties": {
                                            "protocol": "TCP",
                                            "sourcePortRange": "*",
                                            "destinationPortRange": "80",
                                            "sourceAddressPrefix": "*",
                                            "destinationAddressPrefix": "*",
                                            "access": "Allow",
                                            "priority": 110,
                                            "direction": "Inbound"
                                        }
                                    },
                                    {
                                        "name": "AllowAnyHTTPSInbound",
                                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups/securityRules', parameters('nsgName'), 'AllowAnyHTTPSInbound')]",
                                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                                        "properties": {
                                            "protocol": "TCP",
                                            "sourcePortRange": "*",
                                            "destinationPortRange": "443",
                                            "sourceAddressPrefix": "*",
                                            "destinationAddressPrefix": "*",
                                            "access": "Allow",
                                            "priority": 120,
                                            "direction": "Inbound"
                                        }
                                    },
                                    {
                                        "name": "AllowAnyAGENTInbound",
                                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups/securityRules', parameters('nsgName'), 'AllowAnyHTTPSInbound')]",
                                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                                        "properties": {
                                            "protocol": "TCP",
                                            "sourcePortRange": "*",
                                            "destinationPortRange": "1444",
                                            "sourceAddressPrefix": "*",
                                            "destinationAddressPrefix": "*",
                                            "access": "Allow",
                                            "priority": 130,
                                            "direction": "Inbound"
                                        }
                                    }
                                ]
                            }
                        },{
                            "type": "Microsoft.Network/networkInterfaces",
                            "apiVersion": "2022-07-01",
                            "name": "[variables('nicName')]",
                            "location": "[parameters('location')]",
                            "properties": {
                                "ipConfigurations": [
                                    {
                                        "name": "ipconfig1",
                                        "properties": {
                                            "subnet": {
                                                "id": "[resourceId(parameters('networkResourceGroup'),'Microsoft.Network/virtualNetworks/subnets',parameters('vnetName'),parameters('subnetName'))]"
                                            },
                                            "publicIPAddress": "[if(parameters('publicIP'),variables('publicIP'),json('null'))]",
                                            "privateIPAllocationMethod": "Dynamic"
                                        }
                                    }
                                ],
                                "networkSecurityGroup": {
                                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups',parameters('nsgName'))]"
                                }
                            },
                            "dependsOn": [
                                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpName'))]",
                                "[resourceId('Microsoft.Network/networkSecurityGroups',parameters('nsgName'))]"
                            ]
                        },
                        {
                            "type": "Microsoft.Network/publicIPAddresses",
                            "apiVersion": "2022-07-01",
                            "condition": "[and(parameters('publicIP'),not(parameters('existingPublicIp')))]",
                            "name": "[parameters('publicIpName')]",
                            "location": "[parameters('location')]",
                            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/publicIPAddresses'), parameters('tagsByResource')['Microsoft.Network/publicIPAddresses'], json('{}')) ]",
                            "sku": {
                                "name": "Standard",
                                "tier": "Regional"
                            },
                            "zones": [
                                "1",
                                "2",
                                "3"
                            ],
                            "properties": {
                                "publicIPAllocationMethod": "Static",
                                "deleteOption": "Delete",
                                "publicIPAddressVersion": "IPv4",
                                "dnsSettings": {
                                    "domainNameLabel": "[parameters('domainName')]"
                                },
                                "ddosSettings": {
                                    "protectionMode": "VirtualNetworkInherited"
                                }
                            }
                        },
                        {
                            "type": "Microsoft.Compute/virtualMachines",
                            "apiVersion": "2023-03-01",
                            "name": "[parameters('namePrefix')]",
                            "location": "[parameters('location')]",
                            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Compute/virtualMachines'), parameters('tagsByResource')['Microsoft.Compute/virtualMachines'], json('{}')) ]",
                            "properties": {
                                "hardwareProfile": {
                                    "vmSize": "[parameters('vmSize')]"
                                },
                                "storageProfile": {
                                    "osDisk": {
                                        "createOption": "FromImage",
                                        "managedDisk": {
                                            "storageAccountType": "[parameters('storageSKU')]"
                                        }
                                    },
                                    "imageReference": "[parameters('imageRef')]",
                                    "dataDisks": [
                                        {
                                            "name": "[concat(parameters('namePrefix'),'-data-disk')]",
                                            "caching": "None",
                                            "createOption": "Empty",
                                            "deleteOption": "Delete",
                                            "diskSizeGB": "[parameters('dataDiskSize')]",
                                            "lun": 0,
                                            "managedDisk": {
                                                "storageAccountType": "[parameters('storageSKU')]"
                                            }
                                        },
                                        {
                                            "name": "[concat(parameters('namePrefix'),'-traces-disk')]",
                                            "caching": "None",
                                            "createOption": "Empty",
                                            "deleteOption": "Delete",
                                            "diskSizeGB": "[parameters('tracesDiskSize')]",
                                            "lun": 1,
                                            "managedDisk": {
                                                "storageAccountType": "[parameters('storageSKU')]"
                                            }
                                        },
                                        {
                                            "name": "[concat(parameters('namePrefix'),'-metrics-disk')]",
                                            "caching": "None",
                                            "createOption": "Empty",
                                            "deleteOption": "Delete",
                                            "diskSizeGB": "[parameters('metricsDiskSize')]",
                                            "lun": 2,
                                            "managedDisk": {
                                                "storageAccountType": "[parameters('storageSKU')]"
                                            }
                                        }
                                    ]
                                },
                                "networkProfile": {
                                    "networkInterfaces": [
                                        {
                                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
                                        }
                                    ]
                                },
                                "osProfile": {
                                    "computerName": "[parameters('namePrefix')]",
                                    "adminUsername": "[parameters('adminUserName')]",
                                    "adminPassword": "[parameters('adminPassword')]",
                                    "customData": "[base64(variables('vmBootstrap'))]",
                                    "linuxConfiguration": "[if(equals(parameters('authType'), 'sshPublicKey'), variables('linuxConfigSSH'), variables('linuxConfigPWD'))]"
                                },
                                "securityProfile": "[variables('securityProfile')[parameters('securityType')] ]",
                                "diagnosticsProfile": {
                                    "bootDiagnostics": {
                                        "enabled": true
                                    }
                                }
                            },
                            "dependsOn": [
                                "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
                            ]
                        },
                        {
                            "type": "Microsoft.Compute/virtualMachines/extensions",
                            "apiVersion": "2023-03-01",
                            "location": "[parameters('location')]",
                            "name": "[concat(parameters('namePrefix'),'/','install-instana-rhel')]",
                            "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', parameters('namePrefix'))]"
                            ],
                            "properties": {
                                "publisher": "Microsoft.Azure.Extensions",
                                "type": "CustomScript",
                                "typeHandlerVersion": "2.0",
                                "autoUpgradeMinorVersion": true,
                                "protectedSettings": {
                                    "fileUris": [
                                        "[uri(parameters('scriptPath'),parameters('scriptName'))]"
                                    ],
                                    "commandToExecute": "[concat('/bin/bash ',parameters('scriptName'),' -p \"', replace(string(parameters('instanaParameters')), '\"', '\\\"'),'\"',if(parameters('acceptLicense'),' -a ',''))]"
                                }
                            }
                        }
                    ],
                    "outputs": {
                        "publicIp": {
                            "type": "string",
                            "condition": "[parameters('publicIP')]",
                            "value": "[reference(parameters('publicIpName')).IpAddress]"
                        },
                        "fqdn": {
                            "type": "string",
                            "condition": "[parameters('publicIP')]",
                            "value": "[concat(parameters('domainName'),'.',parameters('location'),'cloudapp.azure.com')]"
                        },
                        "internalIp": {
                            "type": "string",
                            "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',parameters('namePrefix'),'2022-11-01').networkProfile.networkInterfaces[0].value)]"
                        }

                    }
                }
            }

        }
    ],
    "outputs": {
        "instanaVmIp": {
            "type": "string",
            "condition": "[parameters('vmPublicIp')]",
            "value": "[reference('vmDeployment').outputs['publicIp'].value]"
        },
        "instanaConsoleExternal": {
            "type": "string",
            "condition": "[parameters('vmPublicIp')]",
            "value": "[uri(concat('https://',reference('vmDeployment').outputs['fqdn'].value),'/')]"
        },
        "instanaConsoleInternal": {
            "type": "string",
            "value": "[uri(concat('https://',reference('vmDeployment').outputs['internalIp'].value),'/')]"
        },
        "vmLoginExt": {
            "type": "string",
            "condition": "[parameters('vmPublicIp')]",
            "value": "[concat('ssh ',parameters('adminUserName'),'@',reference('vmDeployment').outputs['fqdn'].value)]"
        },
        "vmLoginInt": {
            "type": "string",
            "condition": "[not(parameters('vmPublicIp'))]",
            "value": "[concat('ssh ',parameters('adminUserName'),'@',reference('vmDeployment').outputs['internalIp'].value)]"
        },
        "loginDetails": {
            "type": "string",
            "value": "To login via the console, reset the admin password by logging in the VM and running \"instana configure admin -p <password>\" as root."
        }
    }
}