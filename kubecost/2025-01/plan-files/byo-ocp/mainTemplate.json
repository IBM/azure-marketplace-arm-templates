{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "namePrefix": {
            "type": "string",
            "metadata": {
                "description": "Prefix for resource names"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for deployment container"
            }
        },
        "registerDeployment": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Excludes the deployment registration to the partner portal if set to false (debug only)"
            }
        },
        "rgRoleGuid": {
            "type": "string",
            "defaultValue": "[newGuid()]",
            "metadata": {
                "description": "forceUpdateTag property, used to force the execution of the script resource when no other properties have changed."
            }
        },
        "createStorageAccount": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Flag to determine whether to create a new storage account"
            }
        },
        "deployOnVnet": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Flag to determine whether to deploy with a private VNet connection."
            }
        },
        "existingVnet": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Flag to determine whether to create a new virtual network (false) or use existing (true)"
            }
        },
        "vnetCidr": {
            "type": "string",
            "defaultValue": "10.0.0.0/20",
            "metadata": {
                "description": "The address prefix for the new VNet if being created."
            }
        },
        "vnetName": {
            "type": "string",
            "defaultValue": "vnet",
            "metadata": {
                "description": "The name of the new or existing VNet"
            }
        },
        "networkResourceGroup": {
            "type": "string",
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
                "description": "The resource group containing the virtual network"
            }
        },
        "subnetName": {
            "type": "string",
            "defaultValue": "script-subnet",
            "metadata": {
                "description": "Name of the subnet the script will attach to"
            }
        },
        "subnetCidr": {
            "type": "string",
            "defaultValue": "10.0.1.0/27",
            "metadata": {
                "description": "Address prefix for the script subnet"
            }
        },
        "storageAccountName": {
            "type": "string",
            "defaultValue": "[concat(parameters('namePrefix'), 'script',substring(uniqueString(resourceGroup().id),1,7))]",
            "metadata": {
                "description": "Name for the storage account for the script execution"
            }            
        },
        "azureCliVersion": {
            "type": "string",
            "defaultValue": "2.60.0",
            "metadata": {
                "description": "Container image version to pull. Refer https://mcr.microsoft.com/v2/azure-cli/tags/list for list of available versions."
            }
        },
        "acceptLicense": {
            "type": "string",
            "defaultValue": "decline",
            "allowedValues": [
                "accept",
                "decline"
            ],
            "metadata": {
                "description": "Accept IBM License Terms to install software."
            }
        },
        "nameSpace": {
            "type": "string",
            "defaultValue": "kubecost",
            "metadata": {
                "description": "Namespace on the cluster to install kubecost into (will be created if it does not exist)"
            }
        },
        "ocVersion": {
            "type": "string",
            "defaultValue": "4.17",
            "metadata": {
                "description": "Version of the oc client to use"
            }
        },
        "apiServer": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "API server URL for the OpenShift cluster"
            }
        },
        "ocpAdministrator": {
            "type": "string",
            "defaultValue": "kubeadmin",
            "metadata": {
                "description": "OpenShift administrator username"
            }
        },
        "ocpPassword": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "OpenShift administrator password if not using KeyVault to store"
            }
        },
        "clusterName": {
            "type": "string",
            "defaultValue": "MyCluster",
            "metadata": {
                "description": "Name for the OpenShift cluster in Kubecost"
            }
        },
        "createManagedIdentity": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Flag to determine whether to create a new managed identity for script execution"
            }
        },
        "managedIdName": {
            "type": "string",
            "defaultValue": "[concat(parameters('namePrefix'),'-script-id')]",
            "metadata": {
                "description": "Name of the managed identity used for deployment scripts"
            }
        },
        "tagsByResource": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "Tags for the resources"
            }
        },
        "branch": {
            "type": "string",
            "defaultValue": "main",
            "metadata": {
                "description": "GitHub branch for linked deployments."
            }
        },
        "deploymentVersion": {
            "type": "string",
            "defaultValue": "2025-01",
            "metadata": {
                "description": "Deployment version to use"
            }
        }
        
    },
    "variables": {
      "baseUrl": "[uri('https://raw.githubusercontent.com/IBM/azure-marketplace-arm-templates/',parameters('branch'))]",
      "containerGroupName": "[concat(parameters('namePrefix'), '-cg')]",
      "scriptName": "[concat(parameters('namePrefix'),'-script')]",
      "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "roleDefinitionName": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdName')), variables('roleDefinitionId'), resourceGroup().id)]",
      "subnetIds": [
        {
            "id": "[resourceId(parameters('networkResourceGroup'),'Microsoft.Network/virtualNetworks/subnets',parameters('vnetName'),parameters('subnetName'))]"
        }
      ]
    },
    "resources": [
        { 
            "name": "pid-12504287-b070-4dce-afd2-f4080b5ecf5a-partnercenter", 
            "apiVersion": "2024-11-01",
            "condition": "[parameters('registerDeployment')]",
            "comments": "Resource GUID for Cloud Pak for Integration BYOL marketplace entry",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": []
                }
            }
        },
        {  
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2024-05-01",
            "name": "[parameters('vnetName')]",
            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/virtualNetworks'), parameters('tagsByResource')['Microsoft.Network/virtualNetworks'], json('{}')) ]",
            "condition": "[and(not(parameters('existingVnet')),parameters('deployOnVnet'))]",
            "location": "[parameters('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('vnetCIDR')]"
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2024-11-01",
            "name": "scriptSubnet",
            "resourceGroup": "[parameters('networkResourceGroup')]",
            "condition": "[parameters('deployOnVnet')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "expressionEvaluationOptions": {
                    "scope": "Inner"
                },
                "parameters": {
                    "vnetName": {
                        "value": "[parameters('vnetName')]"
                    },
                    "subnetName": {
                        "value": "[parameters('subnetName')]"
                    },
                    "subnetCidr": {
                        "value": "[parameters('subnetCidr')]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "vnetName": {
                            "type": "string"
                        },
                        "subnetName": {
                            "type": "string"
                        },
                        "subnetCidr": {
                            "type": "string"
                        }
                    },
                    "resources": [
                        {
                            "type": "Microsoft.Network/virtualNetworks/subnets",
                            "apiVersion": "2024-05-01",
                            "name": "[format('{0}/{1}', parameters('vnetName'), parameters('subnetName'))]",
                            "properties": {
                                "addressPrefix": "[parameters('subnetCidr')]",
                                "serviceEndpoints": [
                                {
                                    "service": "Microsoft.Storage"
                                }
                                ],
                                "delegations": [
                                    {
                                        "name": "Microsoft.ContainerInstance.containerGroups",
                                        "properties": {
                                            "serviceName": "Microsoft.ContainerInstance/containerGroups"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Resources/deploymentScripts",
            "apiVersion": "2023-08-01",
            "comments": "Deploys the Kubecost deployment container and runs the script",
            "name": "[variables('scriptName')]",
            "location": "[parameters('location')]",
            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Resources/deploymentScripts'), parameters('tagsByResource')['Microsoft.Resources/deploymentScripts'], json('{}')) ]",
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdName'))]": {}
                }
            },
            "kind": "AzureCLI",
            "properties": {
                "forceUpdateTag": "[parameters('rgRoleGuid')]",
                "containerSettings": {
                    "containerGroupName": "[variables('containerGroupName')]",
                    "subnetIds": "[if(parameters('deployOnVnet'),variables('subnetIds'),json('null'))]"
                },
                "storageAccountSettings": {
                    "storageAccountName": "[parameters('storageAccountName')]",
                    "storageAccountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2023-05-01').keys[0].value]"
                },
                "azCliVersion": "[parameters('azureCliVersion')]",  
                "environmentVariables": [
                    {
                        "name": "LICENSE",
                        "value": "[parameters('acceptLicense')]"
                    },
                    {
                        "name": "OC_VERSION",
                        "value": "[parameters('ocVersion')]"
                    },
                    {
                        "name": "NAMESPACE",
                        "value": "[parameters('nameSpace')]"
                    },
                    {
                        "name": "API_SERVER",
                        "value": "[parameters('apiServer')]"
                    },
                    {
                        "name": "OCP_USERNAME",
                        "value": "[parameters('ocpAdministrator')]"
                    },
                    {
                        "name": "OCP_PASSWORD",
                        "securevalue": "[parameters('ocpPassword')]"
                    },
                    {
                        "name": "CLUSTER_NAME",
                        "value": "[parameters('clusterName')]"
                    }
                ],
                "primaryScriptUri": "[uri(variables('baseUrl'),concat(parameters('branch'),'/kubecost/',parameters('deploymentVersion'),'/deploy-kubecost-ocp/deploy-kubecost.sh'))]",
                "timeout": "PT120M",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D"
            },
            "dependsOn": [
                "[variables('roleDefinitionName')]",
                "[resourceId(parameters('networkResourceGroup'),'Microsoft.Resources/deployments', 'scriptSubnet')]"
            ]
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2023-05-01",
            "condition": "[parameters('createStorageAccount')]",
            "name": "[parameters('storageAccountName')]",
            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Storage/storageAccounts'), parameters('tagsByResource')['Microsoft.Storage/storageAccounts'], json('{}')) ]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
                "accessTier": "Hot"
            }
        },
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "apiVersion": "2023-01-31",
            "name": "[parameters('managedIdName')]",
            "condition": "[parameters('createManagedIdentity')]",
            "location": "[parameters('location')]",
            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), parameters('tagsByResource')['Microsoft.ManagedIdentity/userAssignedIdentities'], json('{}')) ]"
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[variables('roleDefinitionName')]",
            "condition": "[parameters('createManagedIdentity')]",
            "dependsOn": [
                "[parameters('managedIdName')]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('roleDefinitionId')]",
                "principalId": "[reference(parameters('managedIdName'), '2023-01-31').principalId]",
                "scope": "[resourceGroup().id]",
                "principalType": "ServicePrincipal"
            }
        }
    ]
}