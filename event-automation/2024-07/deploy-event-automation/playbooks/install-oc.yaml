---

- name: Set version to stable if not provided
  ansible.builtin.set_fact:
    oc_version: "stable"
  when: oc_version is not defined

- name: Set machine architecture if not provided
  ansible.builtin.set_fact:
    arch: "{{ ansible_facts.architecture }}"
  when: arch is not defined

- name: Set OS type to mac if not provided and system reports as Darwin
  ansible.builtin.set_fact:
    os_type: "mac"
  when: 
    - os_type is not defined
    - ansible_facts.system == "Darwin"

- name: Set OS type to linux if not provided and anything else
  ansible.builtin.set_fact:
    os_type: "linux"
  when: os_type is not defined

- name: Build the URL for download
  ansible.builtin.set_fact:
    oc_url: "https://mirror.openshift.com/pub/openshift-v4/{{ arch }}/clients/ocp/{{ oc_version }}/openshift-client-{{ os_type }}.tar.gz"

- name: Output the URL
  ansible.builtin.debug:
    msg: "Will download {{ oc_url }}"
  when: log_level == "debug"

- name: Download the OpenShift client
  ansible.builtin.get_url:
    url: "{{ oc_url }}"
    dest: "{{ directories.tmp_dir  }}"
  register: downloaded_file

- name: Extract the OpenShift client binary 
  ansible.builtin.command:
    tar xzf {{ downloaded_file.dest }} -C {{ directories.tmp_dir }} oc
  register: result

- name: Fail if unable to extract file
  ansible.builtin.fail:
    msg: "Unable to extract the oc client from {{ downloaded_file.dest }}"
  when: result.failed

- name: Move client to bin directory
  ansible.builtin.copy:
    src: "{{ directories.tmp_dir }}/oc"
    dest: "{{ directories.bin_dir }}/oc"
    mode: '0755'
  become: true

# - name: Create a symbolic link for kubectl
#   ansible.builtin.file:
#     src: "{{ directories.bin_dir }}/oc"
#     dest: "{{ directories.bin_dir }}/kubectl"
#     state: link
#   become: true
        