{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "namePrefix": {
            "type": "string",
            "minLength": 3,
            "maxLength": 10,
            "metadata": {
                "description": "Prefix for resource names"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Azure location for resources"
            }
        },
        "vnetName": {
            "type": "string",
            "defaultValue": "vnet",
            "metadata": {
                "description": "Virtual network name"
            }
        },
        "virtualNetworkNewOrExisting":{
            "type": "string",
            "defaultValue": "new",
            "allowedValues": [
                "new",
                "existing"
            ],
            "metadata": {
                "description": "Flag to indicate whether a new virtual network should be created (true), or use an existing one (false)."
            }
        },
        "virtualNetworkResourceGroupName": {
            "type": "string",
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
                "description": "Name of the resource group for the existing virtual network"
            }
        },
        "vnetCIDR": {
            "type": "string",
            "defaultValue": "10.0.0.0/20",
            "metadata": {
                "description": "CIDR for the virtual network if being created."
            }
        },
        "subnetName": {
            "type": "string",
            "defaultValue": "vm-subnet",
            "metadata": {
                "description": "Subnet name to attach to VM"
            }
        },
        "subnetCIDR": {
            "type": "string",
            "defaultValue": "10.0.0.0/24",
            "metadata": {
                "description": "CIDR for the developer subnet"
            }
        },
        "adminUserName": {
            "type": "string",
            "defaultValue": "azureuser",
            "metadata": {
                "description": "Admin user for created VMs"
            }
        },
        "adminPassword": {
            "type": "secureString",
            "metadata": {
                "description": "SSH Key or password for the Virtual Machine."
            }
        },
        "authType": {
            "type": "string",
            "defaultValue": "sshPublicKey",
            "allowedValues": [
                "sshPublicKey",
                "password"
            ],
            "metadata": {
                "description": "Type of VM authentication. SSH Key or Password"
            }
        },
        "securityType": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Standard",
                "TrustedLaunch"
            ],
            "metadata": {
                "description": "Security type for virtual machine (trusted launch not supported with RHEL)"
            }
        },
        "vmNsgSecurityRules": {
            "type": "array",
            "defaultValue": [
                {
                    "name": "SSH",
                    "properties": {
                        "priority": 300,
                        "protocol": "TCP",
                        "access": "Allow",
                        "direction": "Inbound",
                        "sourceAddressPrefix": "*",
                        "sourcePortRange": "*",
                        "destinationAddressPrefix": "*",
                        "destinationPortRange": "22"
                    }
                }
            ]
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_B2s",
            "allowedValues": [
                "Standard_B2s",
                "Standard_D2s_v3",
                "Standard_D4s_v3"
            ],
            "metadata": {
                "description": "Size of Virtual Machine"
            }
        },
        "vmDiskType": {
            "type": "string",
            "defaultValue": "Premium_LRS",
            "allowedValues": [
                "Premium_LRS",
                "Premium_ZRS",
                "Standard_LRS",
                "StandardSSD_LRS",
                "StandardSSD_ZRS",
                "UltraSSD_LRS"
            ],
            "metadata": {
                "description": "OS Disk type for Dev VM"
            }
        },
        "vmZone": {
            "type": "string",
            "defaultValue": "1",
            "allowedValues": [
                "1", "2", "3"
            ],
            "metadata": {
                "description": "Availability zone for the VM"
            }
        },
        "vmOSVersion": {
            "type": "string",
            "defaultValue": "RHEL 8.7",
            "allowedValues": [
                "RHEL 8.6",
                "RHEL 8.7",
                "RHEL 9.2"
            ],
            "metadata": {
                "description": "Operating system version"
            }
        },
        "createPublicIP": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Flag to indicate whether a public ip address should be created."
            }
        },
        "publicIPName": {
            "type": "string",
            "defaultValue": "[concat(parameters('namePrefix'),'-pip')]",
            "metadata": {
                "description": "Name for the public IP address if creating."
            }
        },
        "domainName": {
            "type": "string",
            "defaultValue": "[toLower( concat(parameters('namePrefix'),uniqueString(resourceGroup().name)) )]",
            "metadata": {
                "description": "Domain name prefix for the public IP address"
            }
        },
        "cloudPakVersion": {
            "type": "string",
            "defaultValue": "2023.4.1",
            "metadata": {
                "description": "Version of IBM Cloud Pak for Integration to install"
            }
        },
        "cloudPakLicense": {
            "type": "string",
            "defaultValue": "L-VTPK-22YZPK",
            "metadata": {
                "description": "License Id to be used for the IBM Cloud Pak for Integration installation"
            }
        },
        "entitlementKey": {
            "type": "securestring",
            "metadata": {
                "description": "IBM Entitlement Key for access to download container images"
            }
        },
        "operatorScope": {
            "type": "string",
            "defaultValue": "namespace",
            "allowedValues": [
                "cluster",
                "namespace"
            ],
            "metadata": {
                "description": "Scope of the operator installation"
            }
        },
        "operatorNamespace": {
            "type": "string",
            "defaultValue": "ibmint",
            "metadata": {
                "description": "Namespace to be utilized for the operators if namespace scoped"
            }
        },
        "instanceNamespace": {
            "type": "string",
            "defaultValue": "ibmint",
            "metadata": {
                "description": "Namespace for the Platform Navigator instance"
            }
        },
        "instanceName": {
            "type": "string",
            "defaultValue": "quickstart-integration",
            "metadata": {
                "description": "Name for the Platform Navigator instance"
            }
        },
        "licenseAccepted": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Flag on whether the license terms have been accepted. Will not install the Cloud Pak without this being true."
            }
        },
        "logLevel": {
            "type": "string",
            "defaultValue": "info",
            "allowedValues": [
                "info",
                "debug"
            ],
            "metadata": {
                "description": "Log level for Ansible playbook"
            }
        },
        "branch": {
            "type": "string",
            "defaultValue": "main",
            "metadata": {
                "description": "Github branch for installation script"
            }
        },
        "deploymentVersion": {
            "type": "string",
            "defaultValue": "2024-03",
            "metadata": {
                "description": "Deployment version to use"
            }
        },
        "tagsByResource": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "Tags for resources"
            }
        }
    },
    "variables": {
        "baseUrl": "[uri('https://raw.githubusercontent.com/IBM/azure-marketplace-arm-templates/',parameters('branch'))]",
        "vmName": "[concat(parameters('namePrefix'),'-vm')]",
        "nsgName": "[concat(parameters('namePrefix'), '-nsg')]",
        "nicName": "[concat(parameters('namePrefix'),'-nic')]",
        "linuxConfigSSH": {
            "disablePasswordAuthentication": true,
            "ssh": {
                "publicKeys": [
                    {
                        "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('adminUsername'))]",
                        "keyData": "[parameters('adminPassword')]"
                    }
                ]
            }
        },
        "linuxConfigPWD": {
            "disablePasswordAuthentication": false
        },
        "imageReference": {
            "RHEL 8.6": {
                "publisher": "RedHat",
                "offer": "RHEL",
                "sku": "8_6",
                "version": "latest"
            },
            "RHEL 8.7": {
                "publisher": "RedHat",
                "offer": "RHEL",
                "sku": "8_7",
                "version": "latest"
            },
            "RHEL 9.2": {
                "publisher": "RedHat",
                "offer": "RHEL",
                "sku": "9_2",
                "version": "latest"
            }
        },
        "vmBootstrap": "[concat('#cloud-config\npackage_upgrade: true\npackages:\n- ansible\nruncmd:\n- echo adminuser=',parameters('adminUserName'),' >> /tmp/script-parameters.txt\n')]",
        "securityProfile": {
            "uefiSettings": {
                "secureBootEnabled": false,
                "vTpmEnabled": false
            },
            "securityType": "[parameters('securityType')]"
        },
        "publicIP": {
            "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPName'))]"
        },
        "vnetId": {
            "new": "[resourceId('Microsoft.Network/virtualNetworks',parameters('vnetName'))]",
            "existing": "[resourceId(parameters('virtualNetworkResourceGroupName'),'Microsoft.Network/virtualNetworks',parameters('vnetName'))]"
        },
        "subnetId": "[concat(variables('vnetId')[parameters('virtualNetworkNewOrExisting')],'/subnets/',parameters('subnetName'))]",
        "scriptParameters": {
            "ansible_python_interpreter": "/usr/bin/python3.11",
            "log_level": "[parameters('logLevel')]",
            "entitlementKey": "[parameters('entitlementKey')]",
            "cloud_pak": {
                "version": "[parameters('cloudPakVersion')]",
                "license": "[parameters('cloudPakLicense')]",
                "licensce_accepted": "[parameters('licenseAccepted')]",
                "branch": "[parameters('branch')]",
                "version_uri": "https://raw.githubusercontent.com/IBM/azure-marketplace-arm-templates",
                "version_path": "cloud-pak-for-integration/version-files"
            },
            "operator": {
                "scope": "[parameters('operatorScope')]",
                "namespace": "[parameters('operatorNamespace')]"
            },
            "instance": {
                "name": "[parameters('instanceName')]",
                "namespace": "[parameters('instanceNamespace')]"
            },
            "cluster": {
                "apiServer": "",
                "username": "",
                "password": "",
                "token": ""
            }
        }
    },
    "resources": [
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2020-11-01",
            "condition": "[equals(parameters('virtualNetworkNewOrExisting'),'new')]",
            "comments": "Create a new virtual network if requested.",
            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/virtualNetworks'), parameters('tagsByResource')['Microsoft.Network/virtualNetworks'], json('{}')) ]",
            "name": "[parameters('vnetName')]",
            "location": "[parameters('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('vnetCIDR')]"
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks/subnets",
            "apiVersion": "2020-11-01",
            "condition": "[equals(parameters('virtualNetworkNewOrExisting'),'new')]",
            "name": "[concat(parameters('vnetName'),'/',parameters('subnetName'))]",
            "properties": {
                "addressPrefix": "[parameters('subnetCIDR')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
            ]
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2022-07-01",
            "condition": "[parameters('createPublicIP')]",
            "name": "[parameters('publicIPName')]",
            "location": "[parameters('location')]",
            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/publicIPAddresses'), parameters('tagsByResource')['Microsoft.Network/publicIPAddresses'], json('{}')) ]",
            "sku": {
                "name": "Standard",
                "tier": "Regional"
            },
            "zones": [
                "1",
                "2",
                "3"
            ],
            "properties": {
                "publicIPAllocationMethod": "Static",
                "deleteOption": "Delete",
                "publicIPAddressVersion": "IPv4",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('domainName')]"
                }
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2022-07-01",
            "name": "[variables('nicName')]",
            "location": "[parameters('location')]",
            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/networkInterfaces'), parameters('tagsByResource')['Microsoft.Network/networkInterfaces'], json('{}')) ]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "subnet": {
                                "id": "[variables('subnetId')]"
                            },
                            "publicIPAddress": "[if(parameters('createPublicIP'),variables('publicIP'),json('null'))]",
                            "privateIPAllocationMethod": "Dynamic"
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]",
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPName'))]"
            ]
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2022-07-01",
            "name": "[variables('nsgName')]",
            "location": "[parameters('location')]",
            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/networkSecurityGroups'), parameters('tagsByResource')['Microsoft.Network/networkSecurityGroups'], json('{}')) ]",
            "properties": {
                "securityRules": "[parameters('vmNsgSecurityRules')]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2021-03-01",
            "name": "[variables('vmName')]",
            "location": "[parameters('location')]",
            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Compute/virtualMachines'), parameters('tagsByResource')['Microsoft.Compute/virtualMachines'], json('{}')) ]",
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "storageProfile": {
                    "osDisk": {
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "[parameters('vmDiskType')]"
                        }
                    },
                    "imageReference": "[variables('imageReference')[parameters('vmOSVersion')]]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
                        }
                    ]
                },
                "osProfile": {
                    "computerName": "[variables('vmName')]",
                    "adminUsername": "[parameters('adminUserName')]",
                    "adminPassword": "[parameters('adminPassword')]",
                    "customData": "[base64(variables('vmBootstrap'))]",
                    "linuxConfiguration": "[if(equals(parameters('authType'), 'sshPublicKey'), variables('linuxConfigSSH'), variables('linuxConfigPWD'))]"
                },
                "securityProfile": "[if(equals(parameters('securityType'), 'TrustedLaunch'),variables('securityProfile'),json('null'))]",
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true
                    }
                }
            },
            "zones": [
                "[parameters('vmZone')]"
            ],
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2023-03-01",
            "location": "[parameters('location')]",
            "name": "[concat(variables('vmName'),'/','installCloudPak')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "protectedSettings": {
                    "fileUris": [
                        "[uri(variables('baseUrl'),concat(parameters('branch'),'/cloud-pak-for-integration/',parameters('deploymentVersion'),'/deploy-cp4i-ansible/playbooks/templates/catalogsource.j2'))]",
                        "[uri(variables('baseUrl'),concat(parameters('branch'),'/cloud-pak-for-integration/',parameters('deploymentVersion'),'/deploy-cp4i-ansible/playbooks/templates/operatorgroup.j2'))]",
                        "[uri(variables('baseUrl'),concat(parameters('branch'),'/cloud-pak-for-integration/',parameters('deploymentVersion'),'/deploy-cp4i-ansible/playbooks/templates/pn-instance.j2'))]",
                        "[uri(variables('baseUrl'),concat(parameters('branch'),'/cloud-pak-for-integration/',parameters('deploymentVersion'),'/deploy-cp4i-ansible/playbooks/templates/subscription-cluster.j2'))]",
                        "[uri(variables('baseUrl'),concat(parameters('branch'),'/cloud-pak-for-integration/',parameters('deploymentVersion'),'/deploy-cp4i-ansible/playbooks/templates/subscription-namespace.j2'))]",
                        "[uri(variables('baseUrl'),concat(parameters('branch'),'/cloud-pak-for-integration/',parameters('deploymentVersion'),'/deploy-cp4i-ansible/playbooks/create-catalog.yaml'))]",
                        "[uri(variables('baseUrl'),concat(parameters('branch'),'/cloud-pak-for-integration/',parameters('deploymentVersion'),'/deploy-cp4i-ansible/playbooks/create-og.yaml'))]",
                        "[uri(variables('baseUrl'),concat(parameters('branch'),'/cloud-pak-for-integration/',parameters('deploymentVersion'),'/deploy-cp4i-ansible/playbooks/create-pn-instance.yaml'))]",
                        "[uri(variables('baseUrl'),concat(parameters('branch'),'/cloud-pak-for-integration/',parameters('deploymentVersion'),'/deploy-cp4i-ansible/playbooks/create-subscription.yaml'))]",
                        "[uri(variables('baseUrl'),concat(parameters('branch'),'/cloud-pak-for-integration/',parameters('deploymentVersion'),'/deploy-cp4i-ansible/playbooks/oc-login.yaml'))]",
                        "[uri(variables('baseUrl'),concat(parameters('branch'),'/cloud-pak-for-integration/',parameters('deploymentVersion'),'/deploy-cp4i-ansible/playbooks/install-oc.yaml'))]",
                        "[uri(variables('baseUrl'),concat(parameters('branch'),'/cloud-pak-for-integration/',parameters('deploymentVersion'),'/deploy-cp4i-ansible/playbooks/main.yaml'))]",
                        "[uri(variables('baseUrl'),concat(parameters('branch'),'/cloud-pak-for-integration/',parameters('deploymentVersion'),'/deploy-cp4i-ansible/wait-for-cloud-init.sh'))]"
                    ],
                    "commandToExecute": "[concat('/bin/bash ./wait-for-cloud-init.sh && /bin/bash /usr/local/bin/ansible-playbook ./main.yaml --extra-vars \"', replace(string(variables('scriptParameters')), '\"', '\\\"'),'\"')]"
                }
            }
        }
    ],
    "outputs": {
        "vmName": {
            "type": "string",
            "value": "[variables('vmName')]"
        },
        "internalIP": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', variables('nicName')), '2022-07-01').ipConfigurations[0].properties.privateIPAddress]"
        },
        "publicIP": {
            "condition": "[parameters('createPublicIP')]",
            "type": "string",
            "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPName')), '2022-07-01').ipAddress]"
        },
        "fqdn": {
            "condition": "[parameters('createPublicIP')]",
            "type": "string",
            "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPName')), '2022-07-01').dnsSettings.fqdn]"
        }
    }
}