---
- name: Install IBM Cloud Pak for Integration
  hosts: localhost

  vars:
    ansible_python_interpreter: "/usr/bin/python3"
    log_level: "info"
    cloud_pak:
      version: "2023.4.1"
      license: "L-VTPK-22YZPK"
      license_accepted: false
      branch: "main"
      version_uri: "https://raw.githubusercontent.com/IBM/azure-marketplace-arm-templates"
      version_path: "cloud-pak-for-integration/version-files"
    operator:
      scope: "namespace"
      namespace: "ibmint"
    instance:
      name: "integration-quickstart"
      namespace: "ibmint"
    instance_default:
      retries: 90
      retry_delay: 60
    directories:
      bin_dir: "/usr/local/bin"
      tmp_dir: "/tmp"
    default:
      retries: 60
      retry_delay: 15

  tasks:

    - name: Check if oc client is already installed
      ansible.builtin.stat:
        path: "{{ directories.bin_dir }}/oc"
      register: oc_file

    - name: Install oc client if not already installed
      ansible.builtin.include_tasks:
        file: install-oc.yaml
      when: not oc_file.stat.exists

    - name: Check if already logged into cluster
      ansible.builtin.shell: |
        set timeout 30
        {{ directories.bin_dir }}/oc status > /dev/null 2>&1
        exit 0
      args:
        executable: /bin/bash
      register: response

    - name: Log into the OpenShift cluster with credentials
      ansible.builtin.shell:
        cmd: "{{ directories.bin_dir }}/oc login --server={{ cluster.api_server }} --username={{ cluster.username }} --password={{ cluster.password }}"
      args:
        executable: /bin/bash
      register: response
      until: response.stdout == "Succeeded"
      retries: "{{ default.retries }}"
      delay: "{{ default.retry_delay }}"
      when: 
        - cluster.token == "" or cluster.token is not defined
        - response.stdout == ""

    - name: Log into the OpenShift cluster with token
      ansible.builtin.shell:
        cmd: "{{ directories.bin_dir }}/oc login --server={{ cluster.api_server }} --token={{ cluster.token }}"
      args:
        executable: /bin/bash
      register: response
      until: response.stdout == "Succeeded"
      retries: "{{ default.retries }}"
      delay: "{{ default.retry_delay }}"
      when: 
        - cluster.token != ""
        - cluster.token is defined
        - response.stdout == ""

    - name: Fail if cluster details are not provided
      ansible.builtin.fail:
        msg: "Cluster login details are not provided"

    - name: Log into OpenShift cluster
      ansible.builtin.shell:
        cmd: "{{ directories.bin_dir }}/oc login {{ cluster.api_server }} -u {{ cluster.user }} -p {{ cluster.password }}"

    - name: Create template directory if not already in place
      ansible.builtin.file:
        path: ./templates
        state: directory
      
    # Following is required as some implementations download templates and playbooks to a single directory
    - name: Copy templates to template directory
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: ./templates/
      with_fileglob:
        - ./*.j2

    - name: Check if version specification file exists
      ansible.builtin.stat:
        path: "{{ directories.tmp_dir }}/specs-{{ cloud_pak.version }}.json"
      register: spec_file

    - name: Download the spec file
      ansible.builtin.get_url:
        url: "{{ cloud_pak.version_uri }}/{{ cloud_pak.branch }}/{{ cloud_pak.version_path }}/specs-{{ cloud_pak.version }}.json"
        dest: "{{ directories.tmp_dir  }}"
      register: downloaded_file
      when: not spec_file.stat.exists

    - name: Include spec file variables
      ansible.builtin.include_vars:
        file: "{{ directories.tmp_dir }}/specs-{{ cloud_pak.version }}.json"
        name: cloud_pak_inventory

    - name: Wait for cluster to be available
      ansible.builtin.shell: |
        set timeout 900
        {{ directories.bin_dir }}oc adm wait-for-stable-cluster
        exit 0
      args:
        executable: /bin/bash

    - name: Check if operator namespace exists
      ansible.builtin.shell: |
        set timeout 60
        {{ directories.bin_dir }}/oc get ns {{ operator.namespace }} 2> /dev/null
        exit 0
      register: query_returnedInfo

    - name: Parse returned data to determine if operator namespace already exists
      set_fact:
        operatorNamespaceExists: "{{True if(query_returnedInfo.stdout | length > 0) else False}}"
    
    - name: Create operator namespace
      ansible.builtin.shell: |
        set timeout 300
        {{ directories.bin_dir }}/oc create ns {{ operator.namespace }}
        exit 0
      when: not operatorNamespaceExists

    - name: Check if instance namespace exists
      ansible.builtin.shell: |
        set timeout 60
        {{ directories.bin_dir }}/oc get ns {{ instance.namespace }} 2> /dev/null
        exit 0
      register: query_returnedInfo

    - name: Parse returned data to determine if instance namespace already exists
      set_fact:
        instanceNamespaceExists: "{{True if(query_returnedInfo.stdout | length > 0) else False}}"
    
    - name: Create instance namespace
      ansible.builtin.shell: |
        set timeout 300
        {{ directories.bin_dir }}/oc create ns {{ operator.namespace }}
        exit 0
      when: not instanceNamespaceExists

    - name: Check if entitlement key already exists
      ansible.builtin.shell: |
        set timeout 300
        {{ directories.bin_dir }}/oc get secret -n {{ instance.namespace }} ibm-entitlement-key 2> /dev/null
        exit 0
      args:
        executable: /bin/bash
      register: query_returnedInfo

    - name: Parse returned data to determine if secret already exists
      set_fact:
        secretExists: "{{True if(query_returnedInfo.stdout | length > 0) else False}}"

    - name: Get IBM entitlement key if not provided and secret not created
      ansible.builtin.pause:
        prompt: "Please provide IBM entitlment key: "
      register: entitlementKey
      when: 
        - entitlementKey is not defined
        - not secretExists

    - name: Create the entitlement key secret
      ansible.builtin.shell:
        cmd: "{{ directories.bin_dir }}/oc create secret docker-registry ibm-entitlement-key --docker-server=cp.icr.io --docker-username=cp --docker-password={{ entitlementKey.user_input }} -n {{ instance.namespace }}"
      args:
        executable: /bin/bash
      when: not secretExists
      register: result

    - name: Create catalog source definitions
      ansible.builtin.include_tasks:
        file: ./create-catalog.yaml
      loop: "{{ cloud_pak_inventory.catalogSources }}"

    - name: Create the operator group definition
      ansible.builtin.include_tasks:
        file: ./create-og.yaml
      when: operator.scope == "namespace"

    - name: Create the subscriptions
      ansible.builtin.include_tasks:
        file: ./create-subscription.yaml
      loop: "{{ cloud_pak_inventory.subscriptions }}"

    - name: Create the platform navigator instance
      ansible.builtin.include_tasks:
        file: ./create-pn-instance.yaml
      when: cloud_pak.license_accepted