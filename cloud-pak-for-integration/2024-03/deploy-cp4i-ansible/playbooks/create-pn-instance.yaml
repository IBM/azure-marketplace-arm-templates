---

- name: Check if instance already exists
  ansible.builtin.shell: |
    set timeout 10
    "{{ directories.bin_dir }}/oc get platformnavigator -n {{ instance.namespace }} {{ instance.name }} 2> /dev/null"
    exit 0
  args:
    executable: /bin/bash
  register: query_returnedInfo

- name: Parse returned data to determine if Platform Navigator instance already exists
  set_fact:
    instanceExists: "{{True if(query_returnedInfo.stdout | length > 0) else False}}"

- name: Create platform navigator instance definition
  ansible.builtin.template:
    src: "./templates/pn-instance.j2"
    dest: "{{ directories.tmp_dir }}/pn-instance.yaml"
  when: 
    - not instanceExists

- name: Apply the platform navigator instance definition
  ansible.builtin.shell:
    cmd: "{{ directories.bin_dir }}/oc apply -f {{ directories.tmp_dir }}/pn-instance.yaml"
  args:
    executable: /bin/bash
  register: result
  when: 
    - not instanceExists

- name: Output create instance result
  ansible.builtin.debug:
    var: result
  when: 
    - log_level == "debug"

- name: Wait for instance to be ready (can take up to 60 minutes)
  ansible.builtin.shell: 
    cmd: "{{ directories.bin_dir }}/oc get PlatformNavigator -n {{ instance.namespace }} {{ instance.name }} -o jsonpath='{.status.conditions[].type}'"
  args:
    executable: /bin/bash
  register: response
  until: response.stdout == "Ready"
  retries: "{{ instance_default.retries }}"
  delay: "{{ instance_default.retry_delay }}"

- name: Clean up definition file
  ansible.builtin.file:
    state: absent
    path: "{{ directories.tmp_dir }}/pn-instance.yaml"