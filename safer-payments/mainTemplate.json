{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    // Add public IP name parameter for load balancer
    "parameters": {
        "tshirtSize": {
            "type": "string",
            "defaultValue": "dev",
            "allowedValues": [
                "dev",
                "small",
                "medium",
                "large"
            ],
            "metadata": {
                "description": "T Shirt size of deployment"
            }
        },
        "acceptLicense": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Flag to determine whether to install safer payments"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Azure region for deployed resources"
            }
        },
        "vnetName": {
            "type": "string",
            "defaultValue": "vnet",
            "metadata": {
                "description": "Virtual network name"
            }
        },
        "vnetCidr": {
            "type": "string",
            "defaultValue": "10.0.0.0/20",
            "metadata": {
                "description": "Virtual network address space"
            }
        },
        "vmSubnetName": {
            "type": "string",
            "defaultValue": "vm-subnet",
            "metadata": {
                "description": "VM subnet name"
            }
        },
        "vmSubnetCidr": {
            "type": "string",
            "defaultValue": "10.0.0.0/24",
            "metadata": {
                "description": "VM subnet address space"
            }
        },
        "jumpboxName": {
            "type": "string",
            "defaultValue": "[concat(resourceGroup().name,'-vm-jumpbox')]",
            "metadata": {
                "description": "Name of the jumpbox VM"
            }
        },
        "jumpboxVmSize": {
            "type": "string",
            "defaultValue": "Standard_D2s_v3",
            "metadata": {
                "description": "Size of the jumpbox"
            }
        },
        "jumpboxStorageSku": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "allowedValues": [
                "Premium_LRS",
                "Premium_ZRS",
                "Standard_LRS",
                "StandardSSD_LRS",
                "StandardSSD_ZRS",
                "UltraSSD_LRS"
            ],
            "metadata": {
                "description": "OS Disk type for Dev VM"
            }
        },
        "jumpboxOsVersion": {
            "type": "string",
            "defaultValue": "RHEL 8.6",
            "allowedValues": [
                "RHEL 8.6"
            ],
            "metadata": {
                "description": "Operating system version"
            }
        },
        "jumpboxPublicIp": {
            "type": "bool",
            "defaultValue": "true",
            "metadata": {
                "description": "Flag to determine whether to create a public IP for the jumpbox"
            }
        },
        "bastionSubnetCidr": {
            "type": "string",
            "defaultValue": "10.0.2.0/26",
            "metadata": {
                "description": "Bastion subnet address space"
            }
        },
        "bastionSubnetName": {
            "type": "string",
            "defaultValue": "AzureBastionSubnet",
            "allowedValues": [
                "AzureBastionSubnet"
            ],
            "metadata": {
                "description": "Name of the primary bastion subnet. Do not change from default."
            }
        },
        "deployBastion": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Flag to determine whether to deploy the bastion service"
            }
        },
        "nsgName": {
            "type": "string",
            "defaultValue": "vm-nsg",
            "metadata": {
                "description": "Name of the network security group"
            }
        },
        "enableDDoSProtection": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Enable DDoS network protection on public IP addresses"
            }
        },
        "managedIdName": {
            "type": "string",
            "defaultValue": "[concat(resourceGroup().name,'-sp')]",
            "metadata": {
                "description": "Name of the managed identity used to manage resources"
            }
        },
        "deployKeyVault": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Flag to determine whether to deploy a new key vault"
            }
        },
        "vaultName": {
            "type": "string",
            "defaultValue": "[concat(resourceGroup().name,'-keyvault')]",
            "metadata": {
                "description": "Name of the key vault to store keys and certificates"
            }
        },
        "keyName": {
            "type": "string",
            "defaultValue": "[concat(resourceGroup().name,'-ssh-key')]",
            "metadata": {
                "description": "Name of the ssh key for the nodes that will be created"
            }
        },
        "deployCluster": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Flag to determine whether to deploy Jumpbox (debug only)"
            }
        },
        "deployLoadBalancer": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Flag to determine whether to deploy the load balancer (debug only)"
            }
        },
        "lbPublic": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Create a public access for the load balancer. Will only be accessible from within the VNet if not."
            }
        },
        "lbPublicIPName": {
            "type": "string",
            "defaultValue": "[concat(resourceGroup().name, '-lb-pip')]",
            "metadata": {
                "description": "Name of the public IP resource"
            }
        },
        "node1Name": {
            "type": "string",
            "defaultValue": "[concat(resourceGroup().name,'-node1-vm')]",
            "metadata": {
                "description": "VM name for node 1"
            }
        },
        "node2Name": {
            "type": "string",
            "defaultValue": "[concat(resourceGroup().name,'-node2-vm')]",
            "metadata": {
                "description": "VM name for node 2"
            }
        },
        "node3Name": {
            "type": "string",
            "defaultValue": "[concat(resourceGroup().name,'-node3-vm')]",
            "metadata": {
                "description": "VM name for node 3"
            }
        },
        "adminUserName": {
            "type": "string",
            "defaultValue": "azureuser",
            "metadata": {
                "description": "Admin user for created VMs"
            }
        },
        "adminPassword": {
            "type": "secureString",
            "metadata": {
                "description": "Initial SSH Key or password for node 1."
            }
        },
        "authType": {
            "type": "string",
            "defaultValue": "sshPublicKey",
            "allowedValues": [
                "sshPublicKey",
                "password"
            ],
            "metadata": {
                "description": "Type of VM authentication for initial node 1 configuration. SSH Key or Password"
            }
        },
        "securityType": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Standard",
                "TrustedLaunch"
            ],
            "metadata": {
                "description": "Security type for virtual machine (trusted launch not supported with RHEL)"
            }
        },
        "createVMPublicIP-node1": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Flag to indicate whether a public ip address should be created for node 1."
            }
        },
        "createVMPublicIP-node2": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Flag to indicate whether a public ip address should be created for node 2."
            }
        },
        "createVMPublicIP-node3": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Flag to indicate whether a public ip address should be created for node 3."
            }
        },
        "node1AvailabilityZone": {
            "type": "string",
            "defaultValue": "1",
            "allowedValues": ["1", "2", "3"],
            "metadata": {
                "description": "Availability zone for Node/VM 1"
            }
        },
        "node2AvailabilityZone": {
            "type": "string",
            "defaultValue": "2",
            "allowedValues": ["1", "2", "3"],
            "metadata": {
                "description": "Availability zone for Node/VM 2"
            }
        },
        "node3AvailabilityZone": {
            "type": "string",
            "defaultValue": "3",
            "allowedValues": ["1", "2", "3"],
            "metadata": {
                "description": "Availability zone for Node/VM 3"
            }
        },
        "domainName": {
            "type": "string",
            "defaultValue": "[toLower( concat('sp-',tolower(substring(resourceGroup().id, 1, 5)) ) )]",
            "metadata": {
                "description": "Domain name prefix for the public IP address of the load balancer"
            }
        },
        "branch": {
            "type": "string",
            "defaultValue": "main",
            "metadata": {
                "description": "Github branch for linked deployments."
            }
        },
        "binaryPath": {
            "type": "string",
            "metadata": {
                "description": "URL to the Safer Payments binary to be installed"
            }
        }
    },
    "variables": {
        "baseUrl": "[uri('https://raw.githubusercontent.com/IBM/azure-marketplace-arm-templates/',parameters('branch'))]",
        "scriptOffset": "/safer-payments/node/scripts/",
        "deployScript": "install-sp-rhel.sh",
        "imageReference": {
            "RHEL 8.6": {
                "publisher": "RedHat",
                "offer": "RHEL",
                "sku": "8_6",
                "version": "latest"
            }
        },
        "tshirtSize": {
            "dev": {   // Only for dev work
                "vmSize": "Standard_D2s_v3",
                "vmDiskType": "Standard_LRS",
                "vmOSVersion": "RHEL 8.6",
                "imageURN": "RedHat:RHEL:8_6:latest",
                "dataDiskSize": 100
            },
            "small": {  // 4 cores, 70GB RAM, 200GB Disk
                "vmSize": "Standard_E16-4as_v5",
                "vmDiskType": "Premium_LRS",
                "vmOSVersion": "RHEL 8.6",
                "imageURN": "RedHat:RHEL:8_6:latest",
                "dataDiskSize": 200
            },
            "medium": {  // 4 cores, 70GB RAM, 300GB Disk
                "vmSize": "Standard_E16-4as_v5",
                "vmDiskType": "Premium_LRS",
                "vmOSVersion": "RHEL 8.6",
                "imageURN": "RedHat:RHEL:8_6:latest",
                "dataDiskSize": 300
            },
            "large": {  // 8 cores, 70GB RAM, 400GB Disk
                "vmSize": "Standard_E16-8as_v5",
                "vmDiskType": "Premium_LRS",
                "vmOSVersion": "RHEL 8.6",
                "imageURN": "RedHat:RHEL:8_6:latest",
                "dataDiskSize": 400
            }
        },
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "roleDefinitionName": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdName')), variables('roleDefinitionId'), resourceGroup().id)]"
    },
    "resources": [
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2022-11-01",
            "name": "[parameters('vnetName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('vnetCidr')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[parameters('vmSubnetName')]",
                        "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('vmSubnetName'))]",
                        "properties": {
                            "addressPrefix": "[parameters('vmSubnetCidr')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
                            },
                            "serviceEndpoints": [],
                            "delegations": [],
                            "privateEndpointNetworkPolicies": "Disabled",
                            "privateLinkServiceNetworkPolicies": "Enabled"
                        },
                        "type": "Microsoft.Network/virtualNetworks/subnets"
                    }
                ],
                "enableDdosProtection": "[parameters('enableDDoSProtection')]"
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2022-11-01",
            "name": "[parameters('nsgName')]",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "AllowAnySSHInbound",
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups/securityRules', parameters('nsgName'), 'AllowAnySSHInbound')]",
                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound",
                            "sourcePortRanges": [],
                            "destinationPortRanges": [],
                            "sourceAddressPrefixes": [],
                            "destinationAddressPrefixes": []
                        }
                    },
                    {
                        "name": "AllowAny8001Inbound",
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups/securityRules', parameters('nsgName'), 'AllowAnyHTTPSInbound')]",
                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8001",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 110,
                            "direction": "Inbound",
                            "sourcePortRanges": [],
                            "destinationPortRanges": [],
                            "sourceAddressPrefixes": [],
                            "destinationAddressPrefixes": []
                        }
                    },
                    {
                        "name": "AllowAny8002Inbound",
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups/securityRules', parameters('nsgName'), 'AllowAnyHTTPSInbound')]",
                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8002",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 120,
                            "direction": "Inbound",
                            "sourcePortRanges": [],
                            "destinationPortRanges": [],
                            "sourceAddressPrefixes": [],
                            "destinationAddressPrefixes": []
                        }
                    },
                    {
                        "name": "AllowAny8003Inbound",
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups/securityRules', parameters('nsgName'), 'AllowAnyHTTPSInbound')]",
                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8003",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 130,
                            "direction": "Inbound",
                            "sourcePortRanges": [],
                            "destinationPortRanges": [],
                            "sourceAddressPrefixes": [],
                            "destinationAddressPrefixes": []
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "apiVersion": "2018-11-30",
            "name": "[parameters('managedIdName')]",
            "location": "[parameters('location')]"
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[variables('roleDefinitionName')]",
            "dependsOn": [
                "[parameters('managedIdName')]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('roleDefinitionId')]",
                "principalId": "[reference(parameters('managedIdName'), '2018-11-30').principalId]",
                "scope": "[resourceGroup().id]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "condition": "[parameters('deployBastion')]",
            "name": "deployBastion",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(variables('baseUrl'), concat(parameters('branch'),'/safer-payments/bastion/azuredeploy.json'))]",
                    "contentVersion":"1.0.0.0"
                },
                "parameters": {
                    "namePrefix": {
                        "value": "[concat(resourceGroup().name,'-bastion')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vnetName": {
                        "value": "[parameters('vnetName')]"
                    },
                    "bastionSubnetCIDR": {
                        "value": "[parameters('bastionSubnetCidr')]"
                    },
                    "bastionSubnetName": {
                        "value": "[parameters('bastionSubnetName')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "name": "deployKeyvault",
            "condition": "[parameters('deployKeyVault')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdName'))]",
                "[resourceId('Microsoft.Authorization/roleAssignments', variables('roleDefinitionName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(variables('baseUrl'), concat(parameters('branch'),'/safer-payments/keyvault/azuredeploy.json'))]",
                    "contentVersion":"1.0.0.0"
                },
                "parameters": {
                    "vaultName": {
                        "value": "[parameters('vaultName')]"
                    },
                    "createManagedIdentity": {
                        "value": false
                    },
                    "managedIdName": {
                        "value": "[parameters('managedIdName')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "condition": "[parameters('deployCluster')]",
            "name": "deployCluster",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]",
                "[resourceId('Microsoft.Resources/deployments', 'deployKeyvault')]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdName'))]",
                "[resourceId('Microsoft.Authorization/roleAssignments', variables('roleDefinitionName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "expressionEvaluationOptions": {
                    "scope": "Inner"
                },
                "parameters": {
                    "baseURL": {
                        "value": "[variables('baseUrl')]"
                    },
                    "branch": {
                        "value": "[parameters('branch')]"
                    },
                    "scriptOffset": {
                        "value": "[variables('scriptOffset')]"
                    },
                    "scriptName": {
                        "value": "[variables('deployScript')]"
                    },
                    "inputParameters" : {
                        "value": {
                            "binaryPath": "[parameters('binaryPath')]",
                            "acceptLicense": "[parameters('acceptLicense')]",
                            "adminUser": "[parameters('adminUserName')]",
                            "location": "[parameters('location')]",
                            "resourceGroup": "[resourceGroup().name]",
                            "keyName": "[parameters('keyName')]",
                            "vaultName": "[if(parameters('deployKeyVault'),parameters('vaultName'), '' )]",
                            "vnetName": "[parameters('vnetName')]",
                            "subnetName": "[parameters('vmSubnetName')]",
                            "nsgID": "[resourceId('Microsoft.Network/networkSecurityGroups',parameters('nsgName'))]",
                            "managedIdName": "[parameters('managedIdName')]",
                            "jumpbox": {  
                                "name": "[parameters('jumpboxName')]",
                                "size": "[parameters('jumpboxVmSize')]",
                                "storageSKU": "[parameters('jumpboxStorageSku')]",
                                "adminUserName": "[parameters('adminUserName')]",
                                "adminPassword": "[parameters('adminPassword')]",
                                "authType": "[parameters('authType')]",
                                "securityType": "[parameters('securityType')]",
                                "imageReference": "[variables('imageReference')[parameters('jumpboxOsVersion')]]",
                                "publicIP": "[parameters('jumpboxPublicIp')]"
                            },
                            "nodes": {
                                "node1": {
                                    "instance": "1",
                                    "vmName": "[parameters('node1Name')]",
                                    "vmSize": "[variables('tshirtSize')[parameters('tshirtSize')].vmSize]",
                                    "storageSKU": "[variables('tshirtSize')[parameters('tshirtSize')].vmDiskType]",
                                    "imageURN": "[variables('tshirtSize')[parameters('tshirtSize')].imageURN]",
                                    "zone": "[parameters('node1AvailabilityZone')]",
                                    "publicIP": "[parameters('createVMPublicIP-node1')]"
                                },
                                "node2": {
                                    "instance": "2",
                                    "vmName": "[parameters('node2Name')]",
                                    "vmSize": "[variables('tshirtSize')[parameters('tshirtSize')].vmSize]",
                                    "storageSKU": "[variables('tshirtSize')[parameters('tshirtSize')].vmDiskType]",
                                    "imageURN": "[variables('tshirtSize')[parameters('tshirtSize')].imageURN]",
                                    "zone": "[parameters('node2AvailabilityZone')]",
                                    "publicIP": "[parameters('createVMPublicIP-node2')]"
                                },
                                "node3": {
                                    "instance": "3",
                                    "vmName": "[parameters('node3Name')]",
                                    "vmSize": "[variables('tshirtSize')[parameters('tshirtSize')].vmSize]",
                                    "storageSKU": "[variables('tshirtSize')[parameters('tshirtSize')].vmDiskType]",
                                    "imageURN": "[variables('tshirtSize')[parameters('tshirtSize')].imageURN]",
                                    "zone": "[parameters('node3AvailabilityZone')]",
                                    "publicIP": "[parameters('createVMPublicIP-node3')]"
                                }
                            }
                        }
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "branch": {
                            "type": "string"
                        },
                        "scriptOffset": {
                            "type": "string"
                        },
                        "scriptName": {
                            "type": "string"
                        },
                        "baseURL": {
                            "type": "string"
                        },
                        "inputParameters": {
                            "type": "secureObject"
                        }
                    },
                    "variables": {
                        "vnetId": "[resourceId(parameters('inputParameters').resourceGroup,'Microsoft.Network/virtualNetworks',parameters('inputParameters').vnetName)]",
                        "subnetId": "[concat(variables('vnetId'),'/subnets/',parameters('inputParameters').subnetName)]",
                        "nicName": "[concat(parameters('inputParameters').jumpbox.name,'-nic')]",
                        "publicIpName": "[concat(parameters('inputParameters').jumpbox.name,'-pip')]",
                        "publicIP": {
                            "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPName'))]"
                        },
                        "vmBootstrap": "[concat('#cloud-config\n runcmd:\n - yum update -y')]",
                        "securityProfile": {
                            "uefiSettings": {
                                "secureBootEnabled": true,
                                "vTpmEnabled": true
                            },
                            "securityType": "[parameters('inputParameters').jumpbox.securityType]"
                        },
                        "linuxConfigSSH": {
                            "disablePasswordAuthentication": true,
                            "ssh": {
                                "publicKeys": [
                                    {
                                        "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('inputParameters').jumpbox.adminUserName)]",
                                        "keyData": "[parameters('inputParameters').jumpbox.adminPassword]"
                                    }
                                ]
                            }
                        },
                        "linuxConfigPWD": {
                            "disablePasswordAuthentication": false
                        }
                    },
                    "resources": [
                        {
                            "type": "Microsoft.Network/networkInterfaces",
                            "apiVersion": "2022-07-01",
                            "name": "[variables('nicName')]",
                            "location": "[parameters('inputParameters').location]",
                            "properties": {
                                "ipConfigurations": [
                                    {
                                        "name": "ipconfig1",
                                        "properties": {
                                            "subnet": {
                                                "id": "[variables('subnetId')]"
                                            },
                                            "publicIPAddress": "[if(parameters('inputParameters').jumpbox.publicIP,variables('publicIP'),json('null'))]",
                                            "privateIPAllocationMethod": "Dynamic"
                                        }
                                    }
                                ]
                            },
                            "dependsOn": [
                                "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPName'))]"
                            ]
                        },
                        {
                            "type": "Microsoft.Network/publicIPAddresses",
                            "apiVersion": "2022-07-01",
                            "condition": "[parameters('inputParameters').jumpbox.publicIP]",
                            "name": "[variables('publicIPName')]",
                            "location": "[parameters('inputParameters').location]",
                            "sku": {
                                "name": "Standard",
                                "tier": "Regional"
                            },
                            "zones": [
                                "1",
                                "2",
                                "3"
                            ],
                            "properties": {
                                "publicIPAllocationMethod": "Static",
                                "deleteOption": "Delete",
                                "publicIPAddressVersion": "IPv4"
                            }
                        },
                        {
                            "type": "Microsoft.Compute/virtualMachines",
                            "apiVersion": "2021-03-01",
                            "name": "[parameters('inputParameters').jumpbox.name]",
                            "location": "[parameters('inputParameters').location]",
                            "identity": {
                                "type": "userAssigned",
                                "userAssignedIdentities": {
                                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('inputParameters').managedIdName)]": {}
                                }
                            },
                            "properties": {
                                "hardwareProfile": {
                                    "vmSize": "[parameters('inputParameters').jumpbox.size]"
                                },
                                "storageProfile": {
                                    "osDisk": {
                                        "createOption": "FromImage",
                                        "managedDisk": {
                                            "storageAccountType": "[parameters('inputParameters').jumpbox.storageSKU]"
                                        }
                                    },
                                    "imageReference": "[parameters('inputParameters').jumpbox.imageReference]"
                                },
                                "networkProfile": {
                                    "networkInterfaces": [
                                        {
                                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
                                        }
                                    ]
                                },
                                "osProfile": {
                                    "computerName": "[parameters('inputParameters').jumpbox.name]",
                                    "adminUsername": "[parameters('inputParameters').jumpbox.adminUserName]",
                                    "adminPassword": "[parameters('inputParameters').jumpbox.adminPassword]",
                                    "customData": "[base64(variables('vmBootstrap'))]",
                                    "linuxConfiguration": "[if(equals(parameters('inputParameters').jumpbox.authType, 'sshPublicKey'), variables('linuxConfigSSH'), variables('linuxConfigPWD'))]"
                                },
                                "securityProfile": "[if(equals(parameters('inputParameters').jumpbox.securityType, 'TrustedLaunch'),variables('securityProfile'),json('null'))]",
                                "diagnosticsProfile": {
                                    "bootDiagnostics": {
                                        "enabled": true
                                    }
                                }
                            },
                            "dependsOn": [
                                "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
                            ]
                        },
                        {
                            "type": "Microsoft.Compute/virtualMachines/extensions",
                            "apiVersion": "2022-03-01",
                            "location": "[parameters('inputParameters').location]",
                            "name": "[concat(parameters('inputParameters').jumpbox.name,'/','install-sp-rhel')]",
                            "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', parameters('inputParameters').jumpbox.name)]"
                            ],
                            "properties": {
                                "publisher": "Microsoft.Azure.Extensions",
                                "type": "CustomScript",
                                "typeHandlerVersion": "2.0",
                                "autoUpgradeMinorVersion": true,
                                "protectedSettings": {
                                    "fileUris": [
                                        "[uri(parameters('baseURL'),concat(parameters('branch'),parameters('scriptOffset'),parameters('scriptName')))]"
                                    ],
                                    "commandToExecute": "[concat('/bin/bash ',parameters('scriptName'),' -p \"', replace(string(parameters('inputParameters')), '\"', '\\\"'),'\"',if(parameters('inputParameters').acceptLicense,' -a ',''))]"
                                }
                            }
                        }
                    ],
                    "outputs": {
                        "publicIP": {
                            "type": "string",
                            "condition": "[parameters('inputParameters').jumpbox.publicIP]",
                            "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPName')),'2022-07-01').ipAddress]"
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "condition": "[parameters('deployLoadBalancer')]",
            "name": "getNicParameters",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'deployCluster')]"
            ],
            "properties": {
                "mode": "Incremental",
                "expressionEvaluationOptions": {
                    "scope": "Inner"
                },
                "parameters": {
                    "node1Name": {
                        "value": "[parameters('node1Name')]"
                    },
                    "node2Name": {
                        "value": "[parameters('node2Name')]"
                    },
                    "node3Name": {
                        "value": "[parameters('node3Name')]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "node1Name": {
                            "type": "string"
                        },
                        "node2Name": {
                            "type": "string"
                        },
                        "node3Name": {
                            "type": "string"
                        }
                    },
                    "resources": [],
                    "outputs": {
                        "nic1Id": {
                            "type": "string",
                            "value": "[reference(resourceid('Microsoft.Compute/VirtualMachines',parameters('node1Name')),'2021-03-01').networkProfile.networkInterfaces[0].id]"
                        },
                        "nic2Id": {
                            "type": "string",
                            "value": "[reference(resourceid('Microsoft.Compute/VirtualMachines',parameters('node2Name')),'2021-03-01').networkProfile.networkInterfaces[0].id]"
                        },
                        "nic3Id": {
                            "type": "string",
                            "value": "[reference(resourceid('Microsoft.Compute/VirtualMachines',parameters('node3Name')),'2021-03-01').networkProfile.networkInterfaces[0].id]"
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "condition": "[parameters('deployLoadBalancer')]",
            "name": "deployLoadBalancer",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'deployCluster')]",
                "[resourceId('Microsoft.Resources/deployments', 'getNicParameters')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(variables('baseUrl'), concat(parameters('branch'),'/safer-payments/load-balancer/azuredeploy.json'))]",
                    "contentVersion":"1.0.0.0"
                },
                "parameters": {
                    "namePrefix": {
                        "value": "[resourceGroup().name]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "publicOrPrivate": {
                        "value": "[if( parameters('lbPublic'), 'Public', 'Private' )]"
                    },
                    "publicIpName": {
                        "value": "[parameters('lbPublicIPName')]"
                    },
                    "vnetName": {
                        "value": "[parameters('vnetName')]"
                    },
                    "privateSubnetName": {
                        "value": "[parameters('vmSubnetName')]"
                    },
                    "subnetName": {
                        "value": "[parameters('vmSubnetName')]"
                    },
                    "domainName": {
                        "value": "[parameters('domainName')]"
                    },
                    "nic1Id": {
                        "value": "[reference('getNicParameters').outputs['nic1Id'].value]"
                    },
                    "nic2Id": {
                        "value": "[reference('getNicParameters').outputs['nic2Id'].value]"
                    },
                    "nic3Id": {
                        "value": "[reference('getNicParameters').outputs['nic3Id'].value]"
                    }
                }
            }
        }
    ],
    "outputs": {
        "saferPaymentsPublicUrl": {
            "type": "string",
            "condition": "[and(parameters('deployLoadBalancer'),parameters('deployCluster'),parameters('lbPublic'))]",
            "value": "[concat('http://',reference('deployLoadBalancer').outputs['fqdn'].value,':8001/')]"
        },
        "saferPaymentsPrivateUrl": {
            "type": "string",
            "condition": "[and(parameters('deployLoadBalancer'),parameters('deployCluster'),not(parameters('lbPublic')))]",
            "value": "[concat('http://',reference('deployLoadBalancer').outputs['privateIP'].value,':8001/')]"
        },
        "jumpboxPublicIp": {
            "type": "string",
            "condition": "[parameters('jumpboxPublicIp')]",
            "value": "[reference('deployCluster').outputs['publicIP'].value]"
        }
    }
}