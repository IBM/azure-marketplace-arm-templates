---
- name: Create DB2 machinesets
  hosts: localhost
  gather_facts: true

  vars:
    ansible_python_interpreter: "/usr/bin/python3"
    log_level: "info"
    casedata:
      filename: "case-info.yaml"
    db2:
      node_type: "Standard_D16s_v3"
      namespace: "gdsc"
      zone_qty: 1
      storage_type: "Premium_LRS"
      disk_size: 256
      label_nodes: "true"
      taint_nodes: "true"
      name: "db2"
      zones: 
        - 1
        - 2
    env:
      home: "/root"
    directories:
      bin_dir: "/usr/local/bin"
      tmp_dir: "/tmp"
    default:
      retries: 60
      retry_delay: 15
      cluster_stable_min: "1m"

  tasks:

  - name: Read the CASE details
    when: (case.name is not defined) or (case.version is not defined)
    block:
    - name: Built path to case datafile
      ansible.builtin.set_fact:
        datafile_path: "{{ directories.tmp_dir }}/{{ casedata.filename }}"

    - name: Read the case data file
      ansible.builtin.set_fact:
        case: "{{ lookup('template', datafile_path) | from_yaml }}"

    - name: Output the case details
      ansible.builtin.debug:
        msg: "Case name: {{ case.name }}      Case version: {{ case.version }}"
      when: log_level == "debug"

  - name: Check if oc client is already installed
    ansible.builtin.stat:
      path: "{{ directories.bin_dir }}/oc"
    register: oc_file

  - name: Install oc client if not already installed
    when: not oc_file.stat.exists
    block:
    - name: Set version to stable if not provided
      ansible.builtin.set_fact:
        oc_version: "stable"
      when: oc_version is not defined

    - name: Set machine architecture if not provided
      ansible.builtin.set_fact:
        arch: "{{ ansible_facts.architecture }}"
      when: arch is not defined

    - name: Set OS type to mac if not provided and system reports as Darwin
      ansible.builtin.set_fact:
        os_type: "mac"
      when: 
        - os_type is not defined
        - ansible_facts.system == "Darwin"

    - name: Set OS type to linux if not provided and anything else
      ansible.builtin.set_fact:
        os_type: "linux"
      when: os_type is not defined

    - name: Build the URL for download
      ansible.builtin.set_fact:
        oc_url: "https://mirror.openshift.com/pub/openshift-v4/{{ arch }}/clients/ocp/{{ oc_version }}/openshift-client-{{ os_type }}.tar.gz"

    - name: Output the URL
      ansible.builtin.debug:
        msg: "Will download {{ oc_url }}"
      when: log_level == "debug"

    - name: Download the OpenShift client
      ansible.builtin.get_url:
        url: "{{ oc_url }}"
        dest: "{{ directories.tmp_dir  }}"
      register: downloaded_file

    - name: Extract the OpenShift client binary 
      ansible.builtin.command:
        tar xzf {{ downloaded_file.dest }} -C {{ directories.tmp_dir }} oc
      register: result

    - name: Fail if unable to extract file
      ansible.builtin.fail:
        msg: "Unable to extract the oc client from {{ downloaded_file.dest }}"
      when: result.failed

    - name: Move client to bin directory
      ansible.builtin.copy:
        src: "{{ directories.tmp_dir }}/oc"
        dest: "{{ directories.bin_dir }}/oc"
        mode: '0755'
      become: true

  - name: Check if already logged into cluster (and if logged in with cluster admin role)
    ansible.builtin.shell: |
      set timeout 30
      export HOME={{ env.home | quote }}
      {{ directories.bin_dir }}/oc get co 2> /dev/null
      exit 0
    args:
      executable: /bin/bash
    register: response

  - name: Login to OpenShift cluster if not already logged in
    when: response.stdout == ""  
    block:
    - name: Fail if cluster details are not provided
      ansible.builtin.fail:
        msg: "Cluster login details are not provided"
      when: ( cluster.api_server is not defined ) or 
            ( cluster.token is not defined and cluster.password is not defined ) 

    - name: Set username to kubeadmin if not provided
      ansible.builtin.set_fact:
        username: "kubeadmin"
      when: ( cluster.username is not defined ) or
            ( cluster.username == "" )

    - name: Set username to kubeadmin if not provided
      ansible.builtin.set_fact:
        username: "{{ cluster.username }}"
      when: 
        - cluster.username is defined
        - cluster.username != ""

    - name: Set token to empty if not defined
      ansible.builtin.set_fact:
        cluster_token: ""
      when: cluster.token is not defined

    - name: Set token if defined
      ansible.builtin.set_fact:
        cluster_token: "{{ cluster.token }}"
      when:
        - cluster.token is defined

    - name: Log into the OpenShift cluster with credentials
      ansible.builtin.shell: |
        set timeout 30
        {{ directories.bin_dir }}/oc login --server={{ cluster.api_server }} --username={{ username }} --password={{ cluster.password }} --insecure-skip-tls-verify=true 2> /dev/null 
        exit 0
      args:
        executable: /bin/bash
      register: result
      until: result.stdout != ""
      retries: "{{ default.retries }}"
      delay: "{{ default.retry_delay }}"
      when: 
        - cluster_token == ""

    - name: Log into the OpenShift cluster with token
      ansible.builtin.shell: |
        set timeout 30
        {{ directories.bin_dir }}/oc login --server={{ cluster.api_server }} --token={{ cluster_token }} --insecure-skip-tls-verify=true 2> /dev/null 
        exit 0
      args:
        executable: /bin/bash
      register: result
      until: result.stdout != ""
      retries: "{{ default.retries }}"
      delay: "{{ default.retry_delay }}"
      when: 
        - cluster_token != ""

  - name: Create template directory if not already in place
    ansible.builtin.file:
      path: ./templates
      state: directory
    
  # Following is required as some implementations download templates and playbooks to a single directory
  - name: Copy templates to template directory
    ansible.builtin.copy:
      src: "{{ item }}"
      dest: ./templates/
    with_fileglob:
      - ./*.j2

  - name: Wait for cluster to be available
    ansible.builtin.shell: |
      set timeout 900
      {{ directories.bin_dir }}/oc adm wait-for-stable-cluster --minimum-stable-period {{ default.cluster_stable_min }}
      exit 0
    args:
      executable: /bin/bash

  - name: Collect information about cluster and existing machinesets
    block: 
    - name: Get the cluster id
      ansible.builtin.shell:
        cmd: "{{ directories.bin_dir }}/oc get -o jsonpath='{.status.infrastructureName}{\"\\n\"}' infrastructure cluster"
      register: response

    - name: Set the cluster id fact
      ansible.builtin.set_fact:
        cluster_id: "{{ response.stdout }}"

    - name: Output the cluster id
      ansible.builtin.debug:
        msg: "Cluster id is {{ cluster_id }}"
      when: log_level == "debug"

    - name: Get the openshift version
      ansible.builtin.shell:
        cmd: "{{ directories.bin_dir }}/oc version -o json | jq -r '.openshiftVersion' | awk '{split($0,version,\".\"); print version[1],version[2]}' | sed 's/ /./g'"
      register: response

    - name: Set the openshift version fact
      ansible.builtin.set_fact:
        openshift_version: "{{ response.stdout }}"

    - name: Output the openshift version
      ansible.builtin.debug:
        msg: "OpenShift version is {{ openshift_version }}"
      when: log_level == "debug"

    - name: Get the first machineset
      ansible.builtin.shell: 
        cmd: "{{ directories.bin_dir }}/oc get machinesets -A | grep openshift-machine-api | head -n 1 | awk '{print $2}'"
      register: response
    
    - name: Set the machineset fact
      ansible.builtin.set_fact:
        first_machineset: "{{ response.stdout }}"

    - name: Output the first machineset
      ansible.builtin.debug:
        msg: "First machineset is {{ first_machineset }}"
      when: log_level == "debug"

    - name: Get the cluster location from the first machineset
      ansible.builtin.shell:
        cmd: "{{ directories.bin_dir }}/oc get machineset/{{ first_machineset }} -n openshift-machine-api -o jsonpath='{.spec.template.spec.providerSpec.value.location}{\"\\n\"}'"
      register: response

    - name: Set the location fact
      ansible.builtin.set_fact:
        cluster_location: "{{ response.stdout }}"

    - name: Output the cluster location
      ansible.builtin.debug:
        msg: "Cluster location is {{ cluster_location }}"
      when: log_level == "debug"

    - name: Get the image SKU
      ansible.builtin.shell:
        cmd: "{{ directories.bin_dir }}/oc get machineset/{{ cluster_id }}-worker-{{ cluster_location }}1 -n openshift-machine-api -o jsonpath='{.spec.template.spec.providerSpec.value.image.sku}{\"\\n\"}'"
      register: response

    - name: Set the Image SKU fact
      ansible.builtin.set_fact:
        image_sku: "{{ response.stdout }}"

    - name: Output the image SKU
      ansible.builtin.debug:
        msg: "Image SKU is {{ image_sku }}"
      when: log_level == "debug"

    - name: Get the image offer
      ansible.builtin.shell:
        cmd: "{{ directories.bin_dir }}/oc get machineset/{{ cluster_id }}-worker-{{ cluster_location }}1 -n openshift-machine-api -o jsonpath='{.spec.template.spec.providerSpec.value.image.offer}{\"\\n\"}'"
      register: response

    - name: Set the image offer fact
      ansible.builtin.set_fact:
        image_offer: "{{ response.stdout }}"

    - name: Output the image offer
      ansible.builtin.debug:
        msg: "Image offer is {{ image_offer }}"
      when: log_level == "debug"

    - name: Get the image version
      ansible.builtin.shell:
        cmd: "{{ directories.bin_dir }}/oc get machineset/{{ cluster_id }}-worker-{{ cluster_location }}1 -n openshift-machine-api -o jsonpath='{.spec.template.spec.providerSpec.value.image.version}{\"\\n\"}'"
      register: response

    - name: Set the image version fact
      ansible.builtin.set_fact:
        image_version: "{{ response.stdout }}"

    - name: Output the image version
      ansible.builtin.debug:
        msg: "Image version is {{ image_version }}"
      when: log_level == "debug"

    - name: Get the image publisher
      ansible.builtin.shell:
        cmd: "{{ directories.bin_dir }}/oc get machineset/{{ cluster_id }}-worker-{{ cluster_location }}1 -n openshift-machine-api -o jsonpath='{.spec.template.spec.providerSpec.value.image.publisher}{\"\\n\"}'"
      register: response

    - name: Set the image publisher fact
      ansible.builtin.set_fact:
        image_publisher: "{{ response.stdout }}"

    - name: Output the image publisher
      ansible.builtin.debug:
        msg: "Image publisher is {{ image_publisher }}"
      when: log_level == "debug"

    - name: Get the image resource id
      ansible.builtin.shell:
        cmd: "{{ directories.bin_dir }}/oc get machineset/{{ cluster_id }}-worker-{{ cluster_location }}1 -n openshift-machine-api -o jsonpath='{.spec.template.spec.providerSpec.value.image.resourceID}{\"\\n\"}'"
      register: response

    - name: Set the image resource id fact
      ansible.builtin.set_fact:
        image_resourceid: "{{ response.stdout }}"

    - name: Output the image resourceid
      ansible.builtin.debug:
        msg: "Image resource id is {{ image_resourceid }}"
      when: log_level == "debug"

    - name: Get the OpenShift resource group
      ansible.builtin.shell:
        cmd: "{{ directories.bin_dir }}/oc get machineset/{{ cluster_id }}-worker-{{ cluster_location }}1 -n openshift-machine-api -o jsonpath='{.spec.template.spec.providerSpec.value.resourceGroup}{\"\\n\"}'"
      register: response

    - name: Set the OpenShift resource group fact
      ansible.builtin.set_fact:
        ocp_resource_group: "{{ response.stdout }}"

    - name: Output the OpenShift resource group
      ansible.builtin.debug:
        msg: "ARO resource group is {{ ocp_resource_group }}"
      when: log_level == "debug"

    - name: Get the network resource group
      ansible.builtin.shell: 
        cmd: "{{ directories.bin_dir }}/oc get machineset/{{ cluster_id }}-worker-{{ cluster_location }}1 -n openshift-machine-api -o jsonpath='{.spec.template.spec.providerSpec.value.networkResourceGroup}{\"\\n\"}'"
      register: response

    - name: Set the network resource group
      ansible.builtin.set_fact:
        network_resource_group: "{{ response.stdout }}"

    - name: Output the network resource group
      ansible.builtin.debug:
        msg: "Network resource group is {{ network_resource_group }}"

    - name: Get the VNet name
      ansible.builtin.shell:
        cmd: "{{ directories.bin_dir }}/oc get machineset/{{ cluster_id }}-worker-{{ cluster_location }}1 -n openshift-machine-api -o jsonpath='{.spec.template.spec.providerSpec.value.vnet}{\"\\n\"}'"
      register: response

    - name: Set the VNet name fact
      ansible.builtin.set_fact:
        vnet_name: "{{ response.stdout }}"

    - name: Output the VNet name
      ansible.builtin.debug:
        msg: "VNet name is {{ vnet_name }}"
      when: log_level == "debug"

    - name: Get the Subnet name
      ansible.builtin.shell:
        cmd: "{{ directories.bin_dir }}/oc get machineset/{{ cluster_id }}-worker-{{ cluster_location }}1 -n openshift-machine-api -o jsonpath='{.spec.template.spec.providerSpec.value.subnet}{\"\\n\"}'"
      register: response

    - name: Set the subnet name fact
      ansible.builtin.set_fact:
        subnet_name: "{{ response.stdout }}"

    - name: Output the subnet name
      ansible.builtin.debug:
        msg: "Subnet name is {{ subnet_name }}"
      when: log_level == "debug"

  - name: Create machinesets for DB2
    ansible.builtin.include_tasks:
      file: ./create-db2-machineset.yaml
    loop: "{{ db2.zones }}"

  - name: Pause to allow machinesets to be created
    ansible.builtin.pause:
      minutes: 1

  - name: Wait for machinesets to be available
    ansible.builtin.shell:
      cmd: "{{ directories.bin_dir }}/oc get machinesets -n openshift-machine-api {{ cluster_id }}-{{ db2.name }}-{{ cluster_location }}{{ item }} -o jsonpath='{.status.availableReplicas}{\"\\n\"}'"
    args:
      executable: /bin/bash
    register: response
    until: response.stdout == "{{ db2.zone_qty }}"
    retries: "{{ default.retries }}"
    delay: "{{ default.retry_delay }}"
    loop: "{{ db2.zones }}"

  - name: Output result
    ansible.builtin.debug:
      msg: "Successfully provisioned DB2 node(s)"

  - name: Get the node names
    ansible.builtin.shell: |
      set timeout 15
      {{ directories.bin_dir }}/oc get nodes | grep db2 | awk '{print $1}'
    args:
      executable: /bin/bash
    register: response

  - name: Set fact with output list of nodes
    ansible.builtin.set_fact:
      db2_nodes: "{{ response.stdout_lines }}"

  - name: Convert node list to string separated by commas
    block:
    - name: Output the resulting variable
      ansible.builtin.debug:
        var: db2_nodes
      when: log_level == "debug"

    - ansible.builtin.set_fact:
        db2_node_list: ""

    - name: Convert list of nodes to common separated string
      ansible.builtin.set_fact:
        db2_node_list: "{{ db2_node_list + item + (',' if(not ansible_loop.last) else '') }}"
      loop: "{{ db2_nodes}}"
      loop_control:
        extended: true

    - name: Output list of nodes
      ansible.builtin.debug:
        var: db2_node_list
      when: log_level == "debug"

  - name: Run the DB2 pre-install script
    ansible.builtin.shell: |
      set timeout 600
      {{ directories.bin_dir}}/oc ibm-pak launch {{ case.name }} \
        --version {{ case.version }} \
        --inventory install \
        --action pre-install \
        --tolerance 1 \
        --namespace {{ db2.namespace  }} \
        --args "-n \"{{ db2.namespace  }}\" -h \"{{ db2_node_list }}\" -l {{ db2.label_nodes }} -t {{ db2.taint_nodes }}"
      exit 0
    args:
      executable: /bin/bash
    register: response
    failed_when: response.stderr | length > 0

  - name: Output command result
    ansible.builtin.debug:
      var: response
    when: log_level == "debug"


