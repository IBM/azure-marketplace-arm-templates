---
- name: Install CPD CLI tool and configure deployment VM for watsonx
  hosts: localhost
  gather_facts: false
  become: yes

  vars:
    ansible_python_interpreter: "/usr/bin/python3"
    log_level: "info"
    casedata:
      filename: "case-info.yaml"
    gdsc:
      name: "gdscsuite"
      namespace: "gdsc"
      version: "3.6.2"
      license: "L-QABB-9QRLFB"
      size: "values-small"
      backup_pvc:
        name: "gdsc-backup"
        storageclass: "ocs-storagecluster-cephfs"
        size: "500Gi"
    storageclass:
      rwo: "ocs-storagecluster-ceph-rbd"
      rwx: "ocs-storagecluster-cephfs"
    image:
      pull_secret: "ibm-entitlement-key"
      repository: "cp.icr.io/cp/ibm-guardium-data-security-center"
    ics:
      namespace: "gdsc"
      catalog_registry: "common-service"
    env:
      home: "/root"
    directories:
      bin_dir: "/usr/local/bin"
      tmp_dir: "/tmp"
    default:
      retries: 30
      retry_delay: 15

  tasks:

  - name: Read the CASE details
    when: (case.name is not defined) or (case.version is not defined)
    block:
    - name: Built path to case datafile
      ansible.builtin.set_fact:
        datafile_path: "{{ directories.tmp_dir }}/{{ casedata.filename }}"

    - name: Read the case data file
      ansible.builtin.set_fact:
        case: "{{ lookup('template', datafile_path) | from_yaml }}"

    - name: Output the case details
      ansible.builtin.debug:
        msg: "Case name: {{ case.name }}      Case version: {{ case.version }}"
      when: log_level == "debug"

  - name: Check if oc client is already installed
    ansible.builtin.stat:
      path: "{{ directories.bin_dir }}/oc"
    register: oc_file

  - name: Install oc client if not already installed
    when: not oc_file.stat.exists
    block:
    - name: Set version to stable if not provided
      ansible.builtin.set_fact:
        oc_version: "stable"
      when: oc_version is not defined

    - name: Set machine architecture if not provided
      ansible.builtin.set_fact:
        arch: "{{ ansible_facts.architecture }}"
      when: arch is not defined

    - name: Set OS type to mac if not provided and system reports as Darwin
      ansible.builtin.set_fact:
        os_type: "mac"
      when: 
        - os_type is not defined
        - ansible_facts.system == "Darwin"

    - name: Set OS type to linux if not provided and anything else
      ansible.builtin.set_fact:
        os_type: "linux"
      when: os_type is not defined

    - name: Build the URL for download
      ansible.builtin.set_fact:
        oc_url: "https://mirror.openshift.com/pub/openshift-v4/{{ arch }}/clients/ocp/{{ oc_version }}/openshift-client-{{ os_type }}.tar.gz"

    - name: Output the URL
      ansible.builtin.debug:
        msg: "Will download {{ oc_url }}"
      when: log_level == "debug"

    - name: Download the OpenShift client
      ansible.builtin.get_url:
        url: "{{ oc_url }}"
        dest: "{{ directories.tmp_dir  }}"
      register: downloaded_file

    - name: Extract the OpenShift client binary 
      ansible.builtin.command:
        tar xzf {{ downloaded_file.dest }} -C {{ directories.tmp_dir }} oc
      register: result

    - name: Fail if unable to extract file
      ansible.builtin.fail:
        msg: "Unable to extract the oc client from {{ downloaded_file.dest }}"
      when: result.failed

    - name: Move client to bin directory
      ansible.builtin.copy:
        src: "{{ directories.tmp_dir }}/oc"
        dest: "{{ directories.bin_dir }}/oc"
        mode: '0755'
      become: true

  - name: Check if already logged into cluster (and if logged in with cluster admin role)
    ansible.builtin.shell: |
      set timeout 30
      export HOME={{ env.home | quote }}
      {{ directories.bin_dir }}/oc get co 2> /dev/null
      exit 0
    args:
      executable: /bin/bash
    register: response

  - name: Login to OpenShift cluster if not already logged in
    when: response.stdout == ""  
    block:
    - name: Fail if cluster details are not provided
      ansible.builtin.fail:
        msg: "Cluster login details are not provided"
      when: ( cluster.api_server is not defined ) or 
            ( cluster.token is not defined and cluster.password is not defined ) 

    - name: Set username to kubeadmin if not provided
      ansible.builtin.set_fact:
        username: "kubeadmin"
      when: ( cluster.username is not defined ) or
            ( cluster.username == "" )

    - name: Set username to kubeadmin if not provided
      ansible.builtin.set_fact:
        username: "{{ cluster.username }}"
      when: 
        - cluster.username is defined
        - cluster.username != ""

    - name: Set token to empty if not defined
      ansible.builtin.set_fact:
        cluster_token: ""
      when: cluster.token is not defined

    - name: Set token if defined
      ansible.builtin.set_fact:
        cluster_token: "{{ cluster.token }}"
      when:
        - cluster.token is defined

    - name: Log into the OpenShift cluster with credentials
      ansible.builtin.shell: |
        set timeout 30
        export HOME={{ env.home | quote }}
        {{ directories.bin_dir }}/oc login --server={{ cluster.api_server }} --username={{ username }} --password={{ cluster.password }} --insecure-skip-tls-verify=true 2> /dev/null 
        exit 0
      args:
        executable: /bin/bash
      register: result
      until: result.stdout != ""
      retries: "{{ default.retries }}"
      delay: "{{ default.retry_delay }}"
      when: 
        - cluster_token == ""

    - name: Log into the OpenShift cluster with token
      ansible.builtin.shell: |
        set timeout 30
        export HOME={{ env.home | quote }}
        {{ directories.bin_dir }}/oc login --server={{ cluster.api_server }} --token={{ cluster_token }} --insecure-skip-tls-verify=true 2> /dev/null 
        exit 0
      args:
        executable: /bin/bash
      register: result
      until: result.stdout != ""
      retries: "{{ default.retries }}"
      delay: "{{ default.retry_delay }}"
      when: 
        - cluster_token != ""

  # Following is required as some implementations download templates and playbooks to a single directory
  - name: Copy templates to template directory
    ansible.builtin.copy:
      src: "{{ item }}"
      dest: ./templates/
    with_fileglob:
      - ./*.j2

  - name: Create the backup PVC
    block:

    - name: Create the PVC defintion
      ansible.builtin.template:
        src: ./templates/gdsc-backup-pvc.j2
        dest: "{{ directories.tmp_dir }}/gdsc-backup-pvc-{{ gdsc.name }}.yaml"

    - name: Create the PVC
      ansible.builtin.shell: |
        set timeout 300
        export HOME="{{ env.home }}"
        {{ directories.bin_dir }}/oc apply -f {{ directories.tmp_dir }}/gdsc-backup-pvc-{{ gdsc.name }}.yaml
      args:
        executable: /bin/bash
      register: result

    - name: Output the result of applying the PVC definition
      ansible.builtin.debug:
        var: result
      when: log_level == "debug"

    - name: Clean up the PVC definition
      ansible.builtin.file:
        state: absent
        path: "{{ directories.tmp_dir }}/gdsc-backup-pvc-{{ gdsc.name }}.yaml"

    - name: Get the domain name
      block:
      
      - name: Query the CP route
        ansible.builtin.shell: |
          set timeout 10
          export HOME="{{ env.home }}"
          {{ directories.bin_dir }}/oc get routes -n {{ gdsc.namespace }} cp-console -o jsonpath='{.spec.host}{"\n"}' | awk -F'apps.' '{print $2}'
        args:
          executable: /bin/bash
        register: response

      - name: Output the result of the console query
        ansible.builtin.debug:
          var: response
        when: log_level == "debug"

      - name: Set the domain name fact
        ansible.builtin.set_fact:
          domain_name: "{{ response.stdout }}"

  - name: Create the GDSC Operand
    block:

    - name: Create the operand definition
      ansible.builtin.tempfile:
        src: ./templates/gdsc-operand.j2
        dest: "{{ directories.tmp_dir }}/gdsc-operand-{{ gdsc.name }}.yaml"

    - name: Create the operand
      ansible.builtin.shell: |
        set timeout 300
        export HOME="{{ env.home }}"
        {{ directories.bin_dir }}/oc apply -f {{ directories.tmp_dir }}/gdsc-operand-{{ gdsc.name }}.yaml
      args:
        executable: /bin/bash
      register: result

    - name: Output the result of applying the operand definition
      ansible.builtin.debug:
        var: result
      when: log_level == "debug"

    - name: Clean up the operand definition
      ansible.builtin.file:
        state: absent
        path: "{{ directories.tmp_dir }}/gdsc-operand-{{ gdsc.name }}.yaml"