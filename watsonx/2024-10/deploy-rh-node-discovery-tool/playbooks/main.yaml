---
- name: Install IBM watsonx.ai
  hosts: localhost

  vars:
    ansible_python_interpreter: "/usr/bin/python3"
    log_level: "info"
    operator:
      name: nfd
      namespace: openshift-nfd
    instance:
      name: nfd-instance
      namespace: openshift-nfd
    directories:
      bin_dir: "/usr/local/bin"
      tmp_dir: "/tmp"
    default:
      retries: 30
      retry_delay: 15

  tasks:

    - name: Check if oc client is already installed
      ansible.builtin.stat:
        path: "{{ directories.bin_dir }}/oc"
      register: oc_file

    - name: Install oc client if not already installed
      ansible.builtin.include_tasks:
        file: install-oc.yaml
      when: not oc_file.stat.exists

    - name: Check if already logged into cluster
      ansible.builtin.shell: |
        set timeout 30
        {{ directories.bin_dir }}/oc status 2> /dev/null
        exit 0
      args:
        executable: /bin/bash
      register: response

    - name: Login to OpenShift cluster if not already logged in
      ansible.builtin.include_tasks:
        file: ./oc-login.yaml
      when: response.stdout == ""

    - name: Create template directory if not already in place
      ansible.builtin.file:
        path: ./templates
        state: directory
      
    # Following is required as some implementations download templates and playbooks to a single directory
    - name: Copy templates to template directory
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: ./templates/
      with_fileglob:
        - ./*.j2

    - name: Wait for cluster to be available
      ansible.builtin.shell: |
        set timeout 900
        {{ directories.bin_dir }}oc adm wait-for-stable-cluster
        exit 0
      args:
        executable: /bin/bash

    - name: Check if operator namespace exists
      ansible.builtin.shell: |
        set timeout 60
        {{ directories.bin_dir }}/oc get ns {{ operator.namespace }} 2> /dev/null
        exit 0
      register: query_returnedInfo

    - name: Parse returned data to determine if operator namespace already exists
      set_fact:
        operatorNamespaceExists: "{{True if(query_returnedInfo.stdout | length > 0) else False}}"
    
    - name: Create operator namespace
      ansible.builtin.shell: |
        set timeout 300
        {{ directories.bin_dir }}/oc create ns {{ operator.namespace }}
        exit 0
      when: not operatorNamespaceExists

    - name: Check if instance namespace exists
      ansible.builtin.shell: |
        set timeout 60
        {{ directories.bin_dir }}/oc get ns {{ instance.namespace }} 2> /dev/null
        exit 0
      register: query_returnedInfo

    - name: Parse returned data to determine if instance namespace already exists
      set_fact:
        instanceNamespaceExists: "{{True if(query_returnedInfo.stdout | length > 0) else False}}"
    
    - name: Create instance namespace
      ansible.builtin.shell: |
        set timeout 300
        {{ directories.bin_dir }}/oc create ns {{ instance.namespace }}
        exit 0
      when: not instanceNamespaceExists

    - name: Create the operator group definition
      ansible.builtin.template:
        src: "../templates/operatorgroup.j2"
        dest: "{{ directories.tmp_dir }}/operatorgroup.yaml"

    - name: Apply operator group definition
      ansible.builtin.shell:
        cmd: "{{ directories.bin_dir }}/oc apply -f {{ directories.tmp_dir }}/operatorgroup.yaml"
      args:
        executable: /bin/bash

    - name: Clean up operator group definition
      ansible.builtin.file:
        state: absent
        path: "{{ directories.tmp_dir }}/operatorgroup.yaml"

    - name: Create subscription definition
      ansible.builtin.template:
        src: "./templates/subscription.j2"
        dest: "{{ directories.tmp_dir }}/{{ operator.name }}-subscription.yaml"

    - name: Apply the subscription definition
      ansible.builtin.shell:
        cmd: "{{ directories.bin_dir }}/oc apply -f {{ directories.tmp_dir }}/{{ operator.name }}-subscription.yaml"
      args:
        executable: /bin/bash
      register: result

    - name: Output result if debug
      ansible.builtin.debug:
        var: result
      when: log_level == "debug"

    - name: Wait for the subscription to be available
      ansible.builtin.shell: |
        set timeout 60
        CSV=$({{ directories.bin_dir }}/oc get subscription -n {{ operator.namespace }} {{ operator.name }} -o jsonpath='{.status.currentCSV}' )
        if [[ "$CSV" == "null" ]]; then
          echo "PendingCSV"
        else
          echo $({{ directories.bin_dir }}/oc get csv -n {{ operator.namespace }} ${CSV} -o jsonpath='{.status.phase}')
        fi
        exit 0
      args:
        executable: /bin/bash
      register: response
      until: response.stdout == "Succeeded"
      retries: "{{ default.retries }}"
      delay: "{{ default.retry_delay }}"

    - name: Clean up subscription definition file
      ansible.builtin.file:
        state: absent
        path: "{{ directories.tmp_dir }}/{{ operator.name }}-subscription.yaml"

    - name: Check if NFD instance already exists
      ansible.builtin.shell: |
        set timeout 10
        {{ directories.bin_dir }}/oc get nodefeaturediscovery -n {{ instance.namespace }} {{ instance.name }} 2> /dev/null
        exit 0
      args:
        executable: /bin/bash
      register: query_returnedInfo
    
    - name: Parse returned data to determine if Node Feature Discovery Tool instance already exists
      ansible.builtin.set_fact:
        instanceExists: "{{True if(query_returnedInfo.stdout | length > 0) else False}}"

    - name: Create Node Feature Discovery Tool instance definition
      ansible.builtin.template:
        src: "./templates/nfd-instance.j2"
        dest: "{{ directories.tmp_dir }}/nfd-instance.yaml"
      when:
        - not instanceExists

    - name: Apply the Node Feature Discovery Tool instance definition
      ansible.builtin.shell: 
        cmd: "{{ directories.bin_dir }}/oc apply -f {{ directories.tmp_dir }}/nfd-instance.yaml"
      args:
        executable: /bin/bash
      register: result
      when:
        - not instanceExists

    - name: Output apply instance result
      ansible.builtin.debug:
        var: result
      when:
        - log_level == "debug"
        - not instanceExists

    - name: Wait for instance to be ready
      ansible.builtin.shell: 
        cmd: "{{ directories.bin_dir }}/oc get nodefeaturediscovery -n {{ instance.namespace }} {{ instance.name }} -o jsonpath='{.status.conditions[?(.type==\"Available\")].status}'"
      args:
        executable: /bin/bash
      register: response
      until: response.stdout == "True"
      retries: "{{ default.retries }}"
      delay: "{{ default.retry_delay }}"