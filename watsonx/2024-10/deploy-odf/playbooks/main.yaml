---
- name: Install IBM watsonx.ai
  hosts: localhost

  vars:
    ansible_python_interpreter: "/usr/bin/python3"
    log_level: "info"
    odf:
      license: "decline"
      cluster_size: "1Ti"
      existing_nodes: "no"
    directories:
      bin_dir: "/usr/local/bin"
      tmp_dir: "/tmp"
    default:
      retries: 60
      retry_delay: 15

  tasks:

    - name: Install podman and jq
      ansible.builtin.package:
        name: 
          - podman
          - jq
        state: latest

    - name: Check if oc client is already installed
      ansible.builtin.stat:
        path: "{{ directories.bin_dir }}/oc"
      register: oc_file

    - name: Install oc client if not already installed
      ansible.builtin.include_tasks:
        file: install-oc.yaml
      when: not oc_file.stat.exists

    - name: Check if already logged into cluster
      ansible.builtin.shell: |
        set timeout 30
        {{ directories.bin_dir }}/oc status 2> /dev/null
        exit 0
      args:
        executable: /bin/bash
      register: response

    - name: Login to OpenShift cluster if not already logged in
      ansible.builtin.include_tasks:
        file: ./oc-login.yaml
      when: response.stdout == ""

    - name: Create template directory if not already in place
      ansible.builtin.file:
        path: ./templates
        state: directory
      
    # Following is required as some implementations download templates and playbooks to a single directory
    - name: Copy templates to template directory
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: ./templates/
      with_fileglob:
        - ./*.j2

    - name: Wait for cluster to be available
      ansible.builtin.shell: |
        set timeout 900
        {{ directories.bin_dir }}oc adm wait-for-stable-cluster
        exit 0
      args:
        executable: /bin/bash

    - name: Run ODF deployment script
      ansible.builtin.script:
        cmd: ./deploy-odf.sh -l {{ odf.license }} -s {{ odf.size }} -e {{ odf.existing_nodes }} -w {{ directories.tmp_dir }} -b {{ directories.bin_dir }}
      async: 1800
      poll: 60
      register: odf_script
    
    - name: Show script status
      ansible.builtin.async_status:
        jid: "{{ odf_script.ansible_job_id }}"
      register: script_result
      until: script_result.finished
      retries: 100
      delay: 60

    - name: Show script output
      ansible.builtin.debug:
        msg: "{{ odf_script.stdout }}"
      when: log_level == "debug"