---
- name: Deploy Red Hat OpenShift AI
  hosts: localhost

  vars:
    ansible_python_interpreter: "/usr/bin/python3"
    log_level: "info"
    directories:
      bin_dir: "/usr/local/bin"
      tmp_dir: "/tmp"
    operator:
      name: "rhods-operator"
      namespace: "redhat-ods-operator"
      channel: "eus-2.8"
    instance:
      name: "default-dsc"

  tasks:

    - name: Check if oc client is already installed
      ansible.builtin.stat:
        path: "{{ directories.bin_dir }}/oc"
      register: oc_file

    - name: Install oc client if not already installed
      ansible.builtin.include_tasks:
        file: install-oc.yaml
      when: not oc_file.stat.exists

    - name: Check if already logged into cluster
      ansible.builtin.shell: |
        set timeout 30
        {{ directories.bin_dir }}/oc status 2> /dev/null
        exit 0
      args:
        executable: /bin/bash
      register: response

    - name: Login to OpenShift cluster if not already logged in
      ansible.builtin.include_tasks:
        file: ./oc-login.yaml
      when: response.stdout == ""

    - name: Create template directory if not already in place
      ansible.builtin.file:
        path: ./templates
        state: directory
      
    # Following is required as some implementations download templates and playbooks to a single directory
    - name: Copy templates to template directory
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: ./templates/
      with_fileglob:
        - ./*.j2

    - name: Wait for cluster to be available
      ansible.builtin.shell: |
        set timeout 900
        {{ directories.bin_dir }}/oc adm wait-for-stable-cluster
        exit 0
      args:
        executable: /bin/bash

    - name: Check if operator namespace exists
      ansible.builtin.shell: |
        set timeout 60
        {{ directories.bin_dir }}/oc get ns {{ operator.namespace }} 2> /dev/null
        exit 0
      register: query_returnedInfo

    - name: Parse returned data to determine if operator namespace already exists
      set_fact:
        operatorNamespaceExists: "{{True if(query_returnedInfo.stdout | length > 0) else False}}"
    
    - name: Create operator namespace
      ansible.builtin.shell: |
        set timeout 300
        {{ directories.bin_dir }}/oc create ns {{ operator.namespace }}
        exit 0
      when: not operatorNamespaceExists
      register: result

    - name: Output result of operator namespace creation
      ansible.builtin.debug:
        var: result
      when: log_level == "debug"

    - name: Create the operator group definition
      ansible.builtin.template:
        src: "../templates/operatorgroup.j2"
        dest: "{{ directories.tmp_dir }}/operatorgroup.yaml"

    - name: Apply operator group definition
      ansible.builtin.shell:
        cmd: "{{ directories.bin_dir }}/oc apply -f {{ directories.tmp_dir }}/operatorgroup.yaml"
      args:
        executable: /bin/bash
      register: result

    - name: Output result of operator group application
      ansible.builtin.debug:
        var: result
      when: log_level == "debug"

    - name: Clean up operator group definition
      ansible.builtin.file:
        state: absent
        path: "{{ directories.tmp_dir }}/operatorgroup.yaml"

    - name: Deploy Red Hat OpenShift AI operator
      ansible.builtin.template:
        src: "./templates/subscription.j2"
        dest: "{{ directories.tmp_dir }}/subscription.yaml"

    - name: Apply OpenShift AI operator
      ansible.builtin.shell:
        cmd: "{{ directories.bin_dir }}/oc apply -f {{ directories.tmp_dir }}/subscription.yaml"
      args:
        executable: /bin/bash
      register: result

    - name: Output result of subscription application
      ansible.builtin.debug:
        var: result
      when: log_level == "debug"

    - name: Wait for the OpenShift AI subscription to be available
      ansible.builtin.shell: |
        set timeout 60
        CSV=$({{ directories.bin_dir }}/oc get subscription -n {{ operator.namespace }} {{ operator.name }} -o jsonpath='{.status.currentCSV}')
        if [[ "$CSV" == "null" ]]; then
          echo "PendingCSV"
        else
          echo $({{ directories.bin_dir }}/oc get csv -n {{ operator.namespace }} ${CSV} -o jsonpath='{.status.phase}')
        fi
        exit 0
      args:
        executable: /bin/bash
      register: response
      until: response.stdout == "Succeeded"
      retries: 30
      delay: 15

    - name: Deploy Red Hat OpenShift AI DSC instance
      ansible.builtin.template:
        src: "./templates/dsc-instance.j2"
        dest: "{{ directories.tmp_dir }}/dsc-instance.yaml"

    - name: Apply OpenShift AI DSC instance
      ansible.builtin.shell: |
        {{ directories.bin_dir }}/oc apply -f {{ directories.tmp_dir }}/dsc-instance.yaml
      args:
        executable: /bin/bash
      register: result

    - name: Output result of DSC instance application
      ansible.builtin.debug:
        var: result
      when: log_level == "debug"

    - name: Wait for instance to be ready
      ansible.builtin.shell: 
        cmd: "{{ directories.bin_dir }}/oc get datasciencecluster -n {{ instance.namespace }} {{ instance.name }} -o jsonpath='{.status.conditions[?(.type==\"Available\")].status}'"
      args:
        executable: /bin/bash
      register: response
      until: response.stdout == "True"
      retries: "{{ default.retries }}"
      delay: "{{ default.retry_delay }}"

    - name: Get list of DSC Initializations
      ansible.builtin.shell:
        cmd: "{{ directories.bin_dir }}/oc get dscinitializations 2> /dev/null"
      register: result

    - name: Fail if no DSC Initialization has been created
      ansible.builtin.fail:
        msg: "Install of OpenShift AI failed. DSC Initialization not found."
      when: result.stdout == ""  
    
    - name: Patch DSC Initialization instance 
      ansible.builtin.shell:
        cmd: "oc patch dscinitializations {{ instance.name }}i -p '{\"spec\": {\"serviceMesh\": null}}' --type merge"
      register: result

    - name: Output result of patching the DSC initialization
      ansible.builtin.debug:
        var: result
      when: log_level == "debug"

    - name: Patch the DSC instance
      ansible.builtin.shell:
        cmd: "oc patch DataScienceCluster default-dsc -p '{\"spec\":{\"components\":{\"kserve\":{\"defaultDeploymentMode":\"RawDeployment\",\"managementState\":\"Managed\",\"serving\":{\"managementState\":\"Removed\"}}}}}' --type=merge"
      register: result

    - name: Output result of patching the DSC
      ansible.builtin.debug:
        var: result
      when: log_level == "debug"

    - name: Pause for 30 seconds to let patch apply
      ansible.builtin.pause:
        seconds: 30

    - name: Patch the inference service 
      ansible.builtin.shell: |
        set timeout 300
        TMP_INFERENCE_CONFIG="{{ directories.tmp_dir }}/inference-config.yaml"
        oc get -n redhat-ods-applications configmap/inferenceservice-config -o yaml > $TMP_INFERENCE_CONFIG
        sed -e 's/"ingressClassName": "istio"/"ingressClassName": "openshift-default"/' -i $TMP_INFERENCE_CONFIG
        sed -e 's/"enableDirectPvcVolumeMount": false/"enableDirectPvcVolumeMount": true/' -i $TMP_INFERENCE_CONFIG
        sed -e 's/"domainTemplate": "\{\{ .Name \}\}-\{\{ .Namespace \}\}.\{\{ .IngressDomain \}\}"/"domainTemplate": "example.com"/' -i $TMP_INFERENCE_CONFIG
        oc create -f $TMP_INFERENCE_CONFIG
        oc annotate --overwrite -n redhat-ods-applications configmap/inferenceservice-config opendatahub.io/managed=false
        exit 0
      args:
        executable: /bin/bash
      register: result

    - name: Output the result of patching the inference service
      ansible.builtin.debug:
        var: result
      when: log_level == "debug"

    - name: Restart the operator pod
      ansible.builtin.shell:
        cmd: "oc get po -n {{ operator.namespace }} | grep rhods-operator | awk '{print $1}' | xargs oc delete pod -n {{ operator.namespace }}"
      register: result

    - name: Output the result of restarting the operator pod
      ansible.builtin.debug:
        var: result
      when: log_level == "debug"

    - name: Pause for 30 seconds to let restart occur
      ansible.builtin.pause:
        seconds: 30